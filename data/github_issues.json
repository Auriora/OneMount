[
  {
    "assignees": [],
    "body": "## Description\nImplement documentation recommendations to improve the overall quality and completeness of the OneMount documentation.\n\n## Rationale\nThe current documentation has some gaps and inconsistencies. Implementing these recommendations will improve documentation quality, completeness, and usability.\n\n## Impact\nThis implementation will affect the project documentation and will improve documentation quality, completeness, and usability.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Add a table of contents, contribution guidelines, and code-of-conduct to `README.md`\n- Provide an architecture overview in `docs/DEVELOPMENT.md`\n- Document the test framework architecture\n- Create API documentation for test framework components\n- Add examples of using the test framework\n- Document best practices for writing tests\n- Create templates for different types of tests\n- Add examples of good test design",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lV3P",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 118,
    "state": "OPEN",
    "title": "Implement Documentation Recommendations for OneMount",
    "url": "https://github.com/Auriora/OneMount/issues/118"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement testing recommendations to improve the overall quality and reliability of the OneMount test suite.\n\n## Rationale\nThe current test suite has some limitations that affect test reliability and coverage. Implementing these recommendations will improve test quality, reliability, and coverage.\n\n## Impact\nThis implementation will affect the test suite and will improve test quality, reliability, and coverage.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Target â‰¥80% coverage by adding table-driven unit tests\n- Focus on filesystem operations, error conditions, and concurrency scenarios\n- Replace raw goroutines with `context.Context` management and `sync.WaitGroup`\n- Handle cancellations and orderly shutdowns properly\n- Adopt a uniform error-wrapping strategy across modules\n- Leverage Go's `errors` package or a chosen wrapper for clarity and consistency",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lV1_",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 117,
    "state": "OPEN",
    "title": "Implement Testing Recommendations for OneMount",
    "url": "https://github.com/Auriora/OneMount/issues/117"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement architecture recommendations to improve the overall structure and organization of the OneMount project.\n\n## Rationale\nThe current project structure has some inconsistencies and doesn't fully align with Go community best practices. Implementing these recommendations will improve code organization, maintainability, and testability.\n\n## Impact\nThis implementation will affect the overall project structure and will improve code organization, maintainability, and testability.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Introduce `internal/` for private packages and `pkg/` for public libraries\n- Align with community practices for Go project structure\n- Break down large `main.go` routines into discrete services (e.g., AuthService, FilesystemService)\n- Improve readability and testability of the codebase\n- Define interfaces for external dependencies (Graph API, DB)\n- Inject implementations for easier mocking in tests",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lV08",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJVg",
        "name": "architecture",
        "description": "Related to system architecture",
        "color": "fbca04"
      }
    ],
    "number": 116,
    "state": "OPEN",
    "title": "Implement Architecture Recommendations for OneMount",
    "url": "https://github.com/Auriora/OneMount/issues/116"
  },
  {
    "assignees": [],
    "body": "## Description\nEnhance the NetworkSimulator to support more realistic network scenarios for testing network-related edge cases.\n\n## Rationale\nNetwork-related edge cases are difficult to test without realistic network simulation. Enhancing the NetworkSimulator will enable testing of these edge cases and improve test coverage.\n\n## Impact\nThis implementation will enhance the core test framework in `internal/testutil/framework/` and will improve testing of network-related edge cases.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n- [Test Architecture Design](../docs/2-architecture-and-design/test-architecture-design.md)\n\n## Implementation Notes\n- Implement methods for simulating intermittent connections and network partitions\n- Add support for selective network rules applied to specific API endpoints\n- Implement bandwidth throttling for realistic testing of large file transfers\n- Simulate real-world network error patterns like intermittent failures and partial responses\n\n## Key Types and Functions to Implement\n- `NetworkSimulator` - A simulator for network conditions\n- `NewNetworkSimulator` - Creates a new NetworkSimulator\n- `SetLatency` - Sets the latency for network operations\n- `SetBandwidthLimit` - Sets the bandwidth limit for network operations\n- `SimulateDisconnection` - Simulates a network disconnection\n- `SimulateIntermittentConnection` - Simulates an intermittent network connection\n- `SimulateNetworkPartition` - Simulates a network partition\n- `ApplyToEndpoint` - Applies network conditions to a specific API endpoint\n\n## Files to Modify\n- `internal/testutil/framework/network.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lV0E",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_zI6GA",
        "name": "framework",
        "description": "Framework improvements",
        "color": "1d76db"
      }
    ],
    "number": 115,
    "state": "OPEN",
    "title": "Implement Enhanced Network Simulation for Testing",
    "url": "https://github.com/Auriora/OneMount/issues/115"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd environment validation capabilities to the TestFramework to verify prerequisites before running tests.\n\n## Rationale\nTests may fail due to missing prerequisites or incorrect environment configuration. Adding environment validation will help identify these issues before running tests, reducing false failures and improving test reliability.\n\n## Impact\nThis implementation will enhance the core test framework in `internal/testutil/framework/` and will improve test reliability by ensuring tests run in the correct environment.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n- [Test Architecture Design](../docs/2-architecture-and-design/test-architecture-design.md)\n\n## Implementation Notes\n- Create an `EnvironmentValidator` interface and `DefaultEnvironmentValidator` implementation\n- Add methods for validating the test environment\n- Implement checks for required tools, permissions, and configuration\n- Ensure proper error handling and reporting\n\n## Key Types and Functions to Implement\n- `EnvironmentValidator` - An interface for validating the test environment\n- `DefaultEnvironmentValidator` - The default implementation of EnvironmentValidator\n- `NewDefaultEnvironmentValidator` - Creates a new DefaultEnvironmentValidator\n- `Validate` - Validates the test environment\n- `ValidateWithContext` - Validates the test environment with a context for cancellation\n\n## Files to Modify\n- `internal/testutil/framework/framework.go`\n- `internal/testutil/framework/validator.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVzK",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_zI6GA",
        "name": "framework",
        "description": "Framework improvements",
        "color": "1d76db"
      }
    ],
    "number": 114,
    "state": "OPEN",
    "title": "Implement Environment Validation for TestFramework",
    "url": "https://github.com/Auriora/OneMount/issues/114"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate specialized framework extensions for specific components like the Graph API and filesystem.\n\n## Rationale\nDifferent components have different testing requirements. Creating specialized framework extensions will encapsulate the specialized setup logic and make it easier to write tests for specific components.\n\n## Impact\nThis implementation will create new framework extensions in `internal/testutil/framework/` and will simplify writing tests for specific components.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n- [Test Architecture Design](../docs/2-architecture-and-design/test-architecture-design.md)\n\n## Implementation Notes\n- Create specialized TestFramework extensions for different components\n- Implement the specialized setup logic from the old TestMain functions\n- Add support for component-specific configuration and utilities\n- Ensure proper integration with the core TestFramework\n\n## Key Types and Functions to Implement\n- `GraphTestFramework` - A specialized TestFramework for testing Graph API functionality\n- `NewGraphTestFramework` - Creates a new GraphTestFramework\n- `SetupGraphTest` - Sets up a graph test with the given configuration\n- `FSTestFramework` - A specialized TestFramework for testing filesystem functionality\n- `NewFSTestFramework` - Creates a new FSTestFramework\n- `SetupFSTest` - Sets up a filesystem test with the given configuration\n\n## Files to Create\n- `internal/testutil/framework/graph_framework.go`\n- `internal/testutil/framework/fs_framework.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVyN",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_zI6GA",
        "name": "framework",
        "description": "Framework improvements",
        "color": "1d76db"
      }
    ],
    "number": 113,
    "state": "OPEN",
    "title": "Implement Specialized Framework Extensions",
    "url": "https://github.com/Auriora/OneMount/issues/113"
  },
  {
    "assignees": [],
    "body": "## Description\nExtend the existing `mock_graph.go` file to include more comprehensive fixture creation utilities for Graph API testing.\n\n## Rationale\nMany tests require Graph API fixtures for testing interactions with the Microsoft Graph API. Having a comprehensive set of utilities for creating these fixtures will simplify test creation and improve test readability.\n\n## Impact\nThis implementation will enhance the mock infrastructure in `internal/testutil/mock/` and will simplify creation of test data for Graph API tests.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Create functions for creating various types of DriveItem fixtures\n- Implement utilities for creating nested folder structures\n- Add support for creating items with specific properties\n- Ensure proper integration with the existing MockGraphProvider\n\n## Key Functions to Implement\n- `StandardTestFile` - Returns a standard test file content with predictable content\n- `CreateDriveItemFixture` - Creates a DriveItem fixture for testing\n- `CreateFileItemFixture` - Creates a DriveItem fixture representing a file\n- `CreateFolderItemFixture` - Creates a DriveItem fixture representing a folder\n- `CreateDeletedItemFixture` - Creates a DriveItem fixture representing a deleted item\n- `CreateChildrenFixture` - Creates a slice of DriveItem fixtures representing children of a folder\n- `CreateNestedFolderStructure` - Creates a nested folder structure for testing\n- `CreateDriveItemWithConflict` - Creates a DriveItem fixture with conflict behavior set\n\n## Files to Modify\n- `internal/testutil/mock/mock_graph.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVxC",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 112,
    "state": "OPEN",
    "title": "Enhance Graph API Test Fixtures",
    "url": "https://github.com/Auriora/OneMount/issues/112"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a utility for generating large test files with random DNA sequence data for performance testing.\n\n## Rationale\nPerformance testing requires large files with predictable content. The Dmelfa generator will create files in FASTA format with random DNA sequence data, which can be used for performance testing of file operations.\n\n## Impact\nThis implementation will create a new test utility in `internal/testutil/helpers/` and will enable performance testing with large files.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Create functions for generating large test files with random DNA sequence data\n- Implement a FASTA file format generator\n- Add support for configurable file sizes\n- Ensure proper error handling and logging\n\n## Key Functions to Implement\n- `GenerateDmelfa` - Generates a dmel.fa file with random DNA sequence data of the specified size\n- `EnsureDmelfaExists` - Ensures that the dmel.fa file exists at the path specified in testutil.DmelfaDir\n\n## Files to Create\n- `internal/testutil/helpers/dmelfa_generator.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVv-",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      }
    ],
    "number": 111,
    "state": "OPEN",
    "title": "Implement Dmelfa Generator for Performance Testing",
    "url": "https://github.com/Auriora/OneMount/issues/111"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a set of asynchronous utilities for testing in a dedicated `async.go` file.\n\n## Rationale\nMany tests involve asynchronous operations that require waiting for conditions, retrying operations, or handling timeouts. Having a dedicated set of utilities for these operations will improve test reliability and reduce flakiness.\n\n## Impact\nThis implementation will create new test utilities in `internal/testutil/helpers/` and will improve handling of asynchronous operations in tests across the project.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Create functions for waiting, retrying, and handling timeouts\n- Implement condition-based waiting with configurable timeouts\n- Add support for retrying operations with exponential backoff\n- Ensure proper context handling and cancellation\n\n## Key Functions to Implement\n- `WaitForCondition` - Waits for a condition to be true with a configurable timeout and polling interval\n- `WaitForConditionWithContext` - Waits for a condition to be true with a context for cancellation\n- `RetryWithBackoff` - Retries an operation with exponential backoff until it succeeds or times out\n- `RunWithTimeout` - Runs an operation with a timeout\n- `RunConcurrently` - Runs multiple operations concurrently and waits for all to complete\n- `WaitForFileChange` - Waits for a file to change (by checking its modification time)\n- `WaitForFileExistence` - Waits for a file to exist or not exist\n\n## Files to Create\n- `internal/testutil/helpers/async.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVu7",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 110,
    "state": "OPEN",
    "title": "Implement Asynchronous Utilities for Testing",
    "url": "https://github.com/Auriora/OneMount/issues/110"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a comprehensive set of file utilities for testing in a dedicated `file.go` file.\n\n## Rationale\nMany tests require file operations such as creating test files, verifying file existence and content, and capturing filesystem state. Having a dedicated set of utilities for these operations will simplify test creation and improve test readability.\n\n## Impact\nThis implementation will create new test utilities in `internal/testutil/helpers/` and will simplify file-related test operations across the project.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Create functions for file creation, verification, and state capture\n- Ensure proper cleanup of created files and directories\n- Implement assertion functions for file existence and content\n- Ensure thread-safety with appropriate mutex usage\n\n## Key Functions to Implement\n- `CreateTestFile` - Creates a file with the given content and ensures it's cleaned up after the test\n- `CreateTestDir` - Creates a directory and ensures it's cleaned up after the test\n- `CreateTempDir` - Creates a temporary directory and ensures it's cleaned up after the test\n- `CreateTempFile` - Creates a temporary file with the given content and ensures it's cleaned up after the test\n- `FileExists` - Checks if a file exists at the given path\n- `FileContains` - Checks if a file contains the expected content\n- `AssertFileExists` - Asserts that a file exists at the given path\n- `AssertFileNotExists` - Asserts that a file does not exist at the given path\n- `AssertFileContains` - Asserts that a file contains the expected content\n- `CaptureFileSystemState` - Captures the current state of the filesystem by listing all files and directories\n\n## Files to Create\n- `internal/testutil/helpers/file.go`",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVt7",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 109,
    "state": "OPEN",
    "title": "Implement File Utilities for Testing",
    "url": "https://github.com/Auriora/OneMount/issues/109"
  },
  {
    "assignees": [],
    "body": "## Description\nFix the race condition in the `UploadManager` by enhancing the `WaitForUpload` method to handle cases where a session hasn't been added to the sessions map yet.\n\n## Rationale\nThere's a race condition in the `UploadManager` between queuing an upload and waiting for it. The `WaitForUpload` method checks if the upload session exists in the `sessions` map, but this map is only populated when the session is processed by the `uploadLoop`, which runs on a ticker. This causes test failures when `WaitForUpload` is called immediately after `QueueUploadWithPriority`.\n\n## Impact\nThis implementation will affect the Upload API in `internal/fs/upload_manager.go` and will resolve race conditions in tests without adding unreliable delays.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n\n## Implementation Notes\n- Add a new `GetSession` method to provide thread-safe access to session information\n- Enhance the `WaitForUpload` method to wait for session creation with a timeout\n- Improve error messages to help diagnose issues\n- Ensure thread-safety with appropriate mutex usage\n\n## Files to Modify\n- `internal/fs/upload_manager.go`",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc61lVs2",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTuA",
        "name": "bug",
        "description": "Something isn't working",
        "color": "d73a4a"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 108,
    "state": "CLOSED",
    "title": "Fix Upload API Race Condition",
    "url": "https://github.com/Auriora/OneMount/issues/108"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd signal handling capabilities to the TestFramework to ensure proper cleanup when tests are interrupted.\n\n## Rationale\nWhen tests are interrupted by signals (e.g., SIGINT, SIGTERM), resources may not be properly cleaned up, leading to resource leaks and potential test environment corruption. Adding signal handling will ensure proper cleanup in these scenarios.\n\n## Impact\nThis implementation will affect the core test framework in `internal/testutil/framework/` and will improve the reliability of tests by preventing resource leaks when tests are interrupted.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n- [Test Architecture Design](../docs/2-architecture-and-design/test-architecture-design.md)\n\n## Implementation Notes\n- Add a `SetupSignalHandling` method to the TestFramework\n- Register signal handlers for SIGINT and SIGTERM\n- Ensure all resources are properly cleaned up when signals are received\n- Use a channel to coordinate signal handling and cleanup\n\n## Files to Modify\n- `internal/testutil/framework/framework.go`",
    "closed": true,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6qtQun",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "# Implementation of Signal Handling for TestFramework\n\n## Overview\nI've implemented signal handling capabilities for the TestFramework to ensure proper cleanup when tests are interrupted by signals (e.g., SIGINT, SIGTERM). This implementation helps prevent resource leaks and test environment corruption when tests are forcibly terminated.\n\n## Implementation Details\n\n### New Method: SetupSignalHandling\nAdded a new method to the TestFramework:\n```go\n// SetupSignalHandling registers signal handlers for SIGINT and SIGTERM to ensure\n// proper cleanup when tests are interrupted. It returns a function that can be\n// called to stop signal handling.\nfunc (tf *TestFramework) SetupSignalHandling() func() {\n    // Implementation details...\n}\n```\n\n### Key Features\n1. **Signal Registration**: Registers handlers for SIGINT and SIGTERM signals\n2. **Thread Safety**: Uses mutex to ensure thread-safe signal handling setup and teardown\n3. **Idempotent Operation**: Multiple calls to SetupSignalHandling only register handlers once\n4. **Cleanup Function**: Returns a function that can be called to stop signal handling\n5. **Resource Cleanup**: Ensures all registered resources are properly cleaned up when signals are received\n\n### Implementation Approach\n- Added new fields to TestFramework struct to track signal handling state\n- Used a channel to receive OS signals\n- Implemented a goroutine to handle signals asynchronously\n- Ensured proper cleanup of resources when signals are received\n- Added comprehensive logging for signal handling events\n\n### Testing\nAdded three test cases to verify the implementation:\n1. **TestUT_FW_10_01_SetupSignalHandling_ValidFramework_RegistersSignalHandlers**: Verifies that signal handling is set up correctly\n2. **TestUT_FW_10_02_SetupSignalHandlingIdempotent_CalledTwice_OnlyRegistersOnce**: Verifies that calling SetupSignalHandling twice only registers handlers once\n3. **TestUT_FW_10_03_CleanupResourcesOnSignal_ResourceAdded_ResourceCleaned**: Verifies that resources are cleaned up when a signal is received\n\n## Usage Example\n```go\nfunc TestExample(t *testing.T) {\n    // Create a test framework\n    framework := NewTestFramework(TestConfig{}, logger)\n    \n    // Set up signal handling\n    cleanup := framework.SetupSignalHandling()\n    defer cleanup() // Stop signal handling when the test completes\n    \n    // Add resources to the framework\n    framework.AddResource(resource1)\n    framework.AddResource(resource2)\n    \n    // Run tests...\n    // If the test is interrupted by a signal, resources will be cleaned up\n}\n```\n\n## Benefits\n1. **Prevents Resource Leaks**: Ensures resources are cleaned up even when tests are interrupted\n2. **Improves Test Reliability**: Prevents test environment corruption from interrupted tests\n3. **Simplifies Test Writing**: Developers don't need to implement custom signal handling in tests\n\nThis implementation satisfies all the requirements specified in Issue #107 and follows the project's coding standards and best practices.\n\nCloses #107",
        "createdAt": "2025-05-08T18:54:43Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/107#issuecomment-2863991719",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc61lVr6",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_zI6GA",
        "name": "framework",
        "description": "Framework improvements",
        "color": "1d76db"
      }
    ],
    "number": 107,
    "state": "CLOSED",
    "title": "Add Signal Handling to TestFramework",
    "url": "https://github.com/Auriora/OneMount/issues/107"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement the `FileSystemResource` type and related functionality to enhance the TestFramework's ability to handle complex resources like mounted filesystems.\n\n## Rationale\nThe current TestFramework lacks robust handling of complex resources such as mounted filesystems, which can lead to resource leaks and test failures. Enhancing resource management will improve test reliability and reduce flakiness.\n\n## Impact\nThis implementation will affect the core test framework in `internal/testutil/framework/` and will improve the reliability of tests that use filesystem resources.\n\n## Relevant Documentation\n- [Test Implementation Execution Plan](../docs/0-project-management/test-implementation-execution-plan.md)\n- [Test Architecture Design](../docs/2-architecture-and-design/test-architecture-design.md)\n\n## Implementation Notes\n- Create a `FileSystemResource` struct that implements the `Resource` interface\n- Add methods for mounting and unmounting filesystems\n- Implement proper cleanup mechanisms for all resources\n- Ensure thread-safety with appropriate mutex usage\n\n## Files to Modify\n- `internal/testutil/framework/framework.go`\n- `internal/testutil/framework/resources.go`",
    "closed": true,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6qstR_",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "# Implementation of Enhanced Resource Management for TestFramework\n\nI've implemented the `FileSystemResource` type and related functionality to enhance the TestFramework's ability to handle complex resources like mounted filesystems.\n\n## Implementation Summary\n\nThe implementation includes:\n\n1. Created a new `FileSystemResource` struct in `internal/testutil/framework/resources.go` that implements the `TestResource` interface\n2. Added methods for mounting and unmounting filesystems\n3. Implemented proper cleanup mechanisms for all resources\n4. Ensured thread-safety with appropriate mutex usage\n\n## Key Features\n\n- **Mount/Unmount Operations**: Methods for mounting and unmounting filesystems using system commands\n- **Resource Cleanup**: Automatic cleanup of mounted filesystems and removal of mount points\n- **Thread Safety**: All operations are protected by a mutex for safe concurrent access\n- **Custom Cleanup Functions**: Support for custom cleanup functions to be executed during resource cleanup\n- **Remounting Support**: Ability to remount filesystems (unmount and then mount again)\n- **Status Checking**: Methods to check if a filesystem is mounted and get the mount point\n\n## Testing\n\n- Created comprehensive tests in `internal/testutil/framework/resources_test.go`\n- Tests cover basic functionality, integration with TestFramework, and mount/unmount operations\n- Implemented mock testing to avoid executing actual system commands during tests\n- Verified proper cleanup of resources in all scenarios\n\n## Documentation\n\n- Added detailed documentation to the `resources.go` file\n- Included an overview section explaining the purpose and features\n- Provided examples for basic and advanced usage\n- Added sections on thread safety, error handling, and integration with TestFramework\n- Documented all public methods with clear descriptions of parameters and return values\n\n## Integration with TestFramework\n\n- The `FileSystemResource` type implements the `TestResource` interface\n- Resources can be added to the TestFramework using the `AddResource` method\n- The TestFramework will automatically clean up resources when the `CleanupResources` method is called\n\n## Requirements Satisfied\n\n- âœ… Created a `FileSystemResource` struct that implements the `Resource` interface\n- âœ… Added methods for mounting and unmounting filesystems\n- âœ… Implemented proper cleanup mechanisms for all resources\n- âœ… Ensured thread-safety with appropriate mutex usage\n\nAll requirements specified in the issue have been implemented and thoroughly tested.\n\nCloses #106",
        "createdAt": "2025-05-08T17:59:15Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/106#issuecomment-2863846527",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc61lVqt",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_zI6GA",
        "name": "framework",
        "description": "Framework improvements",
        "color": "1d76db"
      }
    ],
    "number": 106,
    "state": "CLOSED",
    "title": "Implement Enhanced Resource Management for TestFramework",
    "url": "https://github.com/Auriora/OneMount/issues/106"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for cache coherence, invalidation policies, and size management.\n\n## Rationale\n\nEffective caching of metadata and content is essential for performance and offline functionality.\n\n## Impact\n\nHigh - Would improve performance, reduce network traffic, and enable offline access.\n\n## Relevant Documentation\n\n- Requirements: NFR-PERF-003, FR-OFF-001\n- Architecture: SAS 3.2.4 (Key Abstractions - CacheManager)\n- Design: SDS 2.1.3 (Class Diagram - CacheManager class)\n- Implementation: fs/cache.go, fs/offline/cache.go\n\n## Implementation Notes\n\n- Design cache coherence mechanisms\n- Implement TTL-based expiration policies\n- Create size-based eviction strategies\n- Add priority-based caching for frequently accessed items\n- Implement cache validation and refresh mechanisms\n- Design cache persistence for offline access\n",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc61lUpi",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTwg",
        "name": "duplicate",
        "description": "This issue or pull request already exists",
        "color": "cfd3d7"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMzQ",
        "name": "offline",
        "description": "Offline functionality",
        "color": "c2e0c6"
      }
    ],
    "number": 105,
    "state": "CLOSED",
    "title": "Add Cache Management Design",
    "url": "https://github.com/Auriora/OneMount/issues/105"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd complete design for statistics command implementation to analyze OneDrive content.\n\n## Rationale\n\nUsers need tools to analyze their OneDrive content for better management and organization.\n\n## Impact\n\nMedium - Would provide valuable insights into OneDrive content structure and usage patterns.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-001, FR-STAT-002, FR-STAT-003, FR-STAT-004, FR-STAT-005\n- Architecture: SAS 3.2.5 (Key Abstractions - StatisticsManager)\n- Design: Not yet implemented\n- Implementation: Not yet implemented\n\n## Implementation Notes\n\n- Design statistics command architecture\n- Create data collection mechanisms for file metadata\n- Implement analysis algorithms for different statistics types\n- Design output formatting for different report types\n- Add visualization options for statistics\n- Implement caching of statistics results for performance\n",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc61lUl2",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTwg",
        "name": "duplicate",
        "description": "This issue or pull request already exists",
        "color": "cfd3d7"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      }
    ],
    "number": 104,
    "state": "CLOSED",
    "title": "Add Statistics Command Design",
    "url": "https://github.com/Auriora/OneMount/issues/104"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for Nemo extension and icon integration to display file status in the Nemo file manager.\n\n## Rationale\n\nUsers need visual indicators of file status in their file manager for better workflow integration.\n\n## Impact\n\nMedium - Would improve user experience and workflow integration with the desktop environment.\n\n## Relevant Documentation\n\n- Requirements: FR-INT-004, FR-INT-005\n- Architecture: SAS 3.2.6 (Key Abstractions - FileManagerIntegration)\n- Design: Partially implemented through D-Bus interface\n- Implementation: nemo-onedriver/src/nemo-onedriver.c, ui/dbus.go\n\n## Implementation Notes\n\n- Design Nemo extension architecture\n- Create icon mapping for different file statuses\n- Implement D-Bus client in Nemo extension\n- Add status update mechanisms\n- Design configuration options for icon display\n- Implement performance optimizations for status updates\n",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc61lUky",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTwg",
        "name": "duplicate",
        "description": "This issue or pull request already exists",
        "color": "cfd3d7"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 103,
    "state": "CLOSED",
    "title": "Add Nemo File Manager Integration Design",
    "url": "https://github.com/Auriora/OneMount/issues/103"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd sequence diagrams and detailed design for conflict detection and resolution scenarios.\n\n## Rationale\n\nEffective handling of file conflicts is essential for data integrity and user experience in a cloud storage system.\n\n## Impact\n\nHigh - Would prevent data loss and improve user confidence in the system.\n\n## Relevant Documentation\n\n- Requirements: FR-FS-005, FR-OFF-004\n- Architecture: SAS 3.2.2 (Key Abstractions - ConflictManager)\n- Design: SDS 2.1.2 (Class Diagram - ConflictManager class)\n- Implementation: fs/conflict.go, fs/upload_manager.go\n\n## Implementation Notes\n\n- Design conflict detection algorithms\n- Create conflict resolution strategies\n- Implement user notification mechanisms\n- Add conflict copy creation and naming conventions\n- Design conflict history tracking\n- Implement conflict prevention mechanisms\n",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc61lUjd",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTwg",
        "name": "duplicate",
        "description": "This issue or pull request already exists",
        "color": "cfd3d7"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 102,
    "state": "CLOSED",
    "title": "Add File Conflict Handling Design",
    "url": "https://github.com/Auriora/OneMount/issues/102"
  },
  {
    "assignees": [],
    "body": "## Description\n\nCreate Flatpak package to provide universal installation options.\n\n## Rationale\n\nWould provide universal installation options.\n\n## Impact\n\nMedium - Would make installation easier on various distributions.\n\n## Relevant Documentation\n\n- Requirements: NFR-USE-003\n- Architecture: SAS 3.5 (Deployment View)\n- Design: N/A\n- Implementation: N/A (New feature)\n\n#  Implementation Notes\n\n- Research Flatpak packaging requirements\n- Create Flatpak manifest\n- Test packages on various distributions\n- Document installation and usage of packaged versions",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc61lUiY",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTwg",
        "name": "duplicate",
        "description": "This issue or pull request already exists",
        "color": "cfd3d7"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN4w",
        "name": "packaging",
        "description": "Packaging improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOAw",
        "name": "distribution",
        "description": "Distribution improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOIw",
        "name": "deployment",
        "description": "Deployment improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 101,
    "state": "CLOSED",
    "title": "Create Flatpak package",
    "url": "https://github.com/Auriora/OneMount/issues/101"
  },
  {
    "assignees": [],
    "body": "quickxorhash is an external library or routine. It should be in the 'pkg/' folder structure.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc61lUhN",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mTg",
        "name": "code-quality",
        "description": "Improvements to code quality and maintainability",
        "color": "4BA3CF"
      }
    ],
    "number": 100,
    "state": "OPEN",
    "title": "Move 'internal/fs/graph/quickxorhash' to 'pkg/'",
    "url": "https://github.com/Auriora/OneMount/issues/100"
  },
  {
    "assignees": [],
    "body": "quickxorhash is an external library or routine. It should be in the 'pkg/' folder structure.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60ke5v",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mTg",
        "name": "code-quality",
        "description": "Improvements to code quality and maintainability",
        "color": "4BA3CF"
      }
    ],
    "number": 98,
    "state": "OPEN",
    "title": "Move 'internal/fs/graph/quickxorhash' to 'pkg/'",
    "url": "https://github.com/Auriora/OneMount/issues/98"
  },
  {
    "assignees": [],
    "body": "## Description\n\nCreate Flatpak package to provide universal installation options.\n\n## Rationale\n\nWould provide universal installation options.\n\n## Impact\n\nMedium - Would make installation easier on various distributions.\n\n## Relevant Documentation\n\n- Requirements: NFR-USE-003\n- Architecture: SAS 3.5 (Deployment View)\n- Design: N/A\n- Implementation: N/A (New feature)\n\n#  Implementation Notes\n\n- Research Flatpak packaging requirements\n- Create Flatpak manifest\n- Test packages on various distributions\n- Document installation and usage of packaged versions",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jkFa",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN4w",
        "name": "packaging",
        "description": "Packaging improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOAw",
        "name": "distribution",
        "description": "Distribution improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOIw",
        "name": "deployment",
        "description": "Deployment improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 97,
    "state": "OPEN",
    "title": "Create Flatpak package",
    "url": "https://github.com/Auriora/OneMount/issues/97"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd sequence diagrams and detailed design for conflict detection and resolution scenarios.\n\n## Rationale\n\nEffective handling of file conflicts is essential for data integrity and user experience in a cloud storage system.\n\n## Impact\n\nHigh - Would prevent data loss and improve user confidence in the system.\n\n## Relevant Documentation\n\n- Requirements: FR-FS-005, FR-OFF-004\n- Architecture: SAS 3.2.2 (Key Abstractions - ConflictManager)\n- Design: SDS 2.1.2 (Class Diagram - ConflictManager class)\n- Implementation: fs/conflict.go, fs/upload_manager.go\n\n## Implementation Notes\n\n- Design conflict detection algorithms\n- Create conflict resolution strategies\n- Implement user notification mechanisms\n- Add conflict copy creation and naming conventions\n- Design conflict history tracking\n- Implement conflict prevention mechanisms\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jUHN",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 96,
    "state": "OPEN",
    "title": "Add File Conflict Handling Design",
    "url": "https://github.com/Auriora/OneMount/issues/96"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for Nemo extension and icon integration to display file status in the Nemo file manager.\n\n## Rationale\n\nUsers need visual indicators of file status in their file manager for better workflow integration.\n\n## Impact\n\nMedium - Would improve user experience and workflow integration with the desktop environment.\n\n## Relevant Documentation\n\n- Requirements: FR-INT-004, FR-INT-005\n- Architecture: SAS 3.2.6 (Key Abstractions - FileManagerIntegration)\n- Design: Partially implemented through D-Bus interface\n- Implementation: nemo-onedriver/src/nemo-onedriver.c, ui/dbus.go\n\n## Implementation Notes\n\n- Design Nemo extension architecture\n- Create icon mapping for different file statuses\n- Implement D-Bus client in Nemo extension\n- Add status update mechanisms\n- Design configuration options for icon display\n- Implement performance optimizations for status updates\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jTah",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 95,
    "state": "OPEN",
    "title": "Add Nemo File Manager Integration Design",
    "url": "https://github.com/Auriora/OneMount/issues/95"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd complete design for statistics command implementation to analyze OneDrive content.\n\n## Rationale\n\nUsers need tools to analyze their OneDrive content for better management and organization.\n\n## Impact\n\nMedium - Would provide valuable insights into OneDrive content structure and usage patterns.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-001, FR-STAT-002, FR-STAT-003, FR-STAT-004, FR-STAT-005\n- Architecture: SAS 3.2.5 (Key Abstractions - StatisticsManager)\n- Design: Not yet implemented\n- Implementation: Not yet implemented\n\n## Implementation Notes\n\n- Design statistics command architecture\n- Create data collection mechanisms for file metadata\n- Implement analysis algorithms for different statistics types\n- Design output formatting for different report types\n- Add visualization options for statistics\n- Implement caching of statistics results for performance\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jSq_",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      }
    ],
    "number": 94,
    "state": "OPEN",
    "title": "Add Statistics Command Design",
    "url": "https://github.com/Auriora/OneMount/issues/94"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for cache coherence, invalidation policies, and size management.\n\n## Rationale\n\nEffective caching of metadata and content is essential for performance and offline functionality.\n\n## Impact\n\nHigh - Would improve performance, reduce network traffic, and enable offline access.\n\n## Relevant Documentation\n\n- Requirements: NFR-PERF-003, FR-OFF-001\n- Architecture: SAS 3.2.4 (Key Abstractions - CacheManager)\n- Design: SDS 2.1.3 (Class Diagram - CacheManager class)\n- Implementation: fs/cache.go, fs/offline/cache.go\n\n## Implementation Notes\n\n- Design cache coherence mechanisms\n- Implement TTL-based expiration policies\n- Create size-based eviction strategies\n- Add priority-based caching for frequently accessed items\n- Implement cache validation and refresh mechanisms\n- Design cache persistence for offline access\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jSGb",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMzQ",
        "name": "offline",
        "description": "Offline functionality",
        "color": "c2e0c6"
      }
    ],
    "number": 93,
    "state": "OPEN",
    "title": "Add Cache Management Design",
    "url": "https://github.com/Auriora/OneMount/issues/93"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for worker pool management, resource limits, and error propagation in concurrent operations.\n\n## Rationale\n\nEffective concurrency control is essential for performance and stability when handling multiple uploads and downloads simultaneously.\n\n## Impact\n\nHigh - Would improve performance and resource utilization while preventing system overload.\n\n## Relevant Documentation\n\n- Requirements: NFR-PERF-002\n- Architecture: SAS 3.2.3 (Key Abstractions - UploadManager/DownloadManager)\n- Design: SDS 2.1 (Class Diagram - UploadManager and DownloadManager classes)\n- Implementation: fs/upload_manager.go, fs/download_manager.go\n\n## Implementation Notes\n\n- Design worker pool architecture for concurrent operations\n- Implement resource limits and throttling mechanisms\n- Create error propagation patterns for concurrent tasks\n- Add prioritization for critical operations\n- Implement cancellation and timeout handling\n- Design monitoring and metrics for concurrent operations\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jRcL",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKuA",
        "name": "stability",
        "description": "Stability improvements",
        "color": "e99695"
      }
    ],
    "number": 92,
    "state": "OPEN",
    "title": "Add Concurrency Control Design",
    "url": "https://github.com/Auriora/OneMount/issues/92"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for logging configuration, log levels, and integration throughout the system.\n\n## Rationale\n\nStructured logging is essential for effective debugging, monitoring, and troubleshooting in production environments.\n\n## Impact\n\nMedium - Would improve observability and debugging capabilities.\n\n## Relevant Documentation\n\n- Requirements: NFR-MNT-003\n- Architecture: SAS 3.3.1 (Cross-Cutting Concerns - Logging)\n- Design: SDS 2.3.1 (Class Diagram - Logger class)\n- Implementation: fs/logger.go, cmd/common/logging.go\n\n## Implementation Notes\n\n- Design logging configuration system\n- Define standard log levels and their usage\n- Create structured logging patterns for different components\n- Implement context-aware logging\n- Add log rotation and management\n- Design log output formatting for different environments (development vs. production)\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jQxD",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 91,
    "state": "OPEN",
    "title": "Add Structured Logging Design",
    "url": "https://github.com/Auriora/OneMount/issues/91"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for rate limit detection, request queuing, and throttling implementation.\n\n## Rationale\n\nGraceful handling of API rate limiting is essential for maintaining service availability and preventing account lockouts.\n\n## Impact\n\nHigh - Would improve reliability and prevent service disruptions due to rate limiting.\n\n## Relevant Documentation\n\n- Requirements: NFR-REL-004\n- Architecture: SAS 3.2.2 (Key Abstractions - RateLimitManager)\n- Design: SDS 2.2.2 (Class Diagram - RateLimitManager class)\n- Implementation: fs/graph/client.go, fs/rate_limit.go\n\n## Implementation Notes\n\n- Design rate limit detection mechanisms\n- Implement request queuing for rate-limited operations\n- Add adaptive throttling based on server responses\n- Create backoff strategies for rate limit recovery\n- Implement priority-based request scheduling\n- Add monitoring and reporting of rate limit status\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jQPR",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 90,
    "state": "OPEN",
    "title": "Add Rate Limit Handling Design",
    "url": "https://github.com/Auriora/OneMount/issues/90"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd detailed design for retry policies, timeout handling, and failure recovery.\n\n## Rationale\n\nRobust handling of network errors and retry operations is required for reliable operation in unstable network environments.\n\n## Impact\n\nHigh - Would improve reliability and resilience against transient network issues.\n\n## Relevant Documentation\n\n- Requirements: NFR-REL-001\n- Architecture: SAS 3.2.1 (Key Abstractions - RetryManager)\n- Design: SDS 2.2.1 (Class Diagram - RetryManager class)\n- Implementation: fs/retry.go, fs/graph/client.go\n\n## Implementation Notes\n\n- Design retry policy framework\n- Create timeout handling mechanisms\n- Implement exponential backoff algorithms\n- Add failure categorization (transient vs. permanent)\n- Implement circuit breaker pattern\n- Document the retry policy implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jPVT",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 89,
    "state": "OPEN",
    "title": "Add Retry Policy Design",
    "url": "https://github.com/Auriora/OneMount/issues/89"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd sequence diagrams for the synchronization process and conflict resolution.\n\n## Rationale\n\nDetailed design for synchronization of offline changes is required for reliable data consistency.\n\n## Impact\n\nHigh - Would ensure data integrity and prevent data loss during offline-to-online transitions.\n\n## Relevant Documentation\n\n- Requirements: FR-OFF-004\n- Architecture: SAS 3.1.3 (Key Abstractions - SynchronizationManager)\n- Design: SDS 2.1.3 (Class Diagram - SynchronizationManager class)\n- Implementation: fs/offline/sync.go, fs/upload_manager.go\n\n## Implementation Notes\n\n- Design synchronization process architecture\n- Create sequence diagrams for synchronization flows\n- Implement conflict detection algorithms\n- Add conflict resolution strategies\n- Implement transaction-based synchronization\n- Document the synchronization process implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jOu7",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMzQ",
        "name": "offline",
        "description": "Offline functionality",
        "color": "c2e0c6"
      }
    ],
    "number": 88,
    "state": "OPEN",
    "title": "Add Synchronization Process Design",
    "url": "https://github.com/Auriora/OneMount/issues/88"
  },
  {
    "assignees": [],
    "body": "## Description\n\nEnhance design with network connectivity monitoring components and state transition diagrams.\n\n## Rationale\n\nAutomatic detection of network connectivity changes is required for seamless offline functionality.\n\n## Impact\n\nHigh - Would improve reliability and user experience during network transitions.\n\n## Relevant Documentation\n\n- Requirements: FR-OFF-003\n- Architecture: SAS 3.1.2 (Key Abstractions - ConnectivityMonitor)\n- Design: SDS 2.1.2 (Class Diagram - ConnectivityMonitor class)\n- Implementation: fs/offline/connectivity.go\n\n## Implementation Notes\n\n- Design network connectivity monitoring architecture\n- Create state transition diagrams for connectivity states\n- Implement connectivity detection mechanisms\n- Add event notification system for connectivity changes\n- Implement graceful handling of network transitions\n- Document the connectivity monitoring implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jOJz",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMzQ",
        "name": "offline",
        "description": "Offline functionality",
        "color": "c2e0c6"
      }
    ],
    "number": 87,
    "state": "OPEN",
    "title": "Enhance Network Connectivity Monitoring",
    "url": "https://github.com/Auriora/OneMount/issues/87"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for documentation standards and verification for public APIs.\n\n## Rationale\n\nGodoc-compatible comments for public APIs are required to ensure code understandability and maintainability.\n\n## Impact\n\nMedium - Would improve developer experience and code maintainability.\n\n## Relevant Documentation\n\n- Requirements: NFR-MNT-004\n- Architecture: SAS 3.11 (Key Abstractions - APIDocumentation)\n- Design: SDS 2.11 (Class Diagram - APIDocumentation class)\n- Implementation: fs/*.go, cmd/*.go\n\n## Implementation Notes\n\n- Design API documentation standards\n- Create documentation verification tools\n- Implement godoc-compatible comment templates\n- Add example usage documentation\n- Implement documentation generation\n- Document the API documentation process\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jNhm",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 86,
    "state": "OPEN",
    "title": "Add API Documentation Standards",
    "url": "https://github.com/Auriora/OneMount/issues/86"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for test architecture, mocking, and coverage reporting.\n\n## Rationale\n\nComprehensive test coverage is required to ensure code quality and prevent regressions.\n\n## Impact\n\nHigh - Would improve code quality, reliability, and maintainability.\n\n## Relevant Documentation\n\n- Requirements: NFR-MNT-002\n- Architecture: SAS 3.10 (Key Abstractions - TestFramework)\n- Design: SDS 2.10 (Class Diagram - TestFramework class)\n- Implementation: testutil/, fs/*_test.go, cmd/*_test.go\n\n## Implementation Notes\n\n- Design test architecture framework\n- Create mocking infrastructure\n- Implement test coverage reporting\n- Add integration test framework\n- Implement performance benchmarks\n- Document the test architecture\n",
    "closed": true,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6pbQqE",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "Implemented test architecture design in docs/design/test-architecture-design.md",
        "createdAt": "2025-04-30T16:05:29Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/85#issuecomment-2842495620",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc60jNFi",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 85,
    "state": "CLOSED",
    "title": "Add Test Architecture Design",
    "url": "https://github.com/Auriora/OneMount/issues/85"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for project organization following Go standards.\n\n## Rationale\n\nFollowing Go's standard project layout is required for maintainability and developer familiarity.\n\n## Impact\n\nMedium - Would improve code organization and maintainability.\n\n## Relevant Documentation\n\n- Requirements: NFR-MNT-001\n- Architecture: SAS 3.9 (Key Abstractions - ProjectStructure)\n- Design: SDS 2.9 (Class Diagram - ProjectStructure)\n- Implementation: cmd/, pkg/, internal/\n\n## Implementation Notes\n\n- Design project structure following Go standards\n- Create directory organization guidelines\n- Implement package organization\n- Add module dependency management\n- Implement build system integration\n- Document the project structure\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jMmr",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 84,
    "state": "OPEN",
    "title": "Add Project Structure Design",
    "url": "https://github.com/Auriora/OneMount/issues/84"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for documentation system and integration with the codebase.\n\n## Rationale\n\nComprehensive documentation is required for installation, usage, and development.\n\n## Impact\n\nMedium - Would improve user and developer experience.\n\n## Relevant Documentation\n\n- Requirements: NFR-USE-003\n- Architecture: SAS 3.8 (Key Abstractions - DocumentationSystem)\n- Design: SDS 2.8 (Class Diagram - DocumentationSystem class)\n- Implementation: docs/, man/\n\n## Implementation Notes\n\n- Design documentation system architecture\n- Create documentation generation framework\n- Implement man page generation\n- Add README and installation guide generation\n- Implement API documentation integration\n- Document the documentation system\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jML2",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 83,
    "state": "OPEN",
    "title": "Add Documentation System Design",
    "url": "https://github.com/Auriora/OneMount/issues/83"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for error message standardization and user-friendly presentation.\n\n## Rationale\n\nClear error messages are required to help users understand and resolve issues.\n\n## Impact\n\nMedium - Would improve user experience and reduce support requests.\n\n## Relevant Documentation\n\n- Requirements: NFR-USE-001\n- Architecture: SAS 3.7 (Key Abstractions - ErrorHandler)\n- Design: SDS 2.7 (Class Diagram - ErrorHandler class)\n- Implementation: fs/errors.go, ui/error_dialog.go\n\n## Implementation Notes\n\n- Design error message standardization framework\n- Create error message catalog\n- Implement user-friendly error presentation\n- Add error categorization and severity levels\n- Implement context-sensitive help for errors\n- Document the error handling implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jLza",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 82,
    "state": "OPEN",
    "title": "Add Error Message Standardization",
    "url": "https://github.com/Auriora/OneMount/issues/82"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for crash detection, state persistence, and recovery mechanisms.\n\n## Rationale\n\nGraceful recovery from crashes is required to ensure system reliability and data integrity.\n\n## Impact\n\nHigh - Would improve system reliability and prevent data loss.\n\n## Relevant Documentation\n\n- Requirements: NFR-REL-002\n- Architecture: SAS 3.3 (Key Abstractions - RecoveryManager)\n- Design: SDS 2.3 (Class Diagram - RecoveryManager class)\n- Implementation: fs/recovery.go, fs/database.go\n\n## Implementation Notes\n\n- Design crash detection mechanism\n- Create state persistence architecture\n- Implement stale lock file detection\n- Add automatic recovery on restart\n- Implement transaction logging\n- Document the crash recovery implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jLa4",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 81,
    "state": "OPEN",
    "title": "Add Crash Recovery Design",
    "url": "https://github.com/Auriora/OneMount/issues/81"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for timing measurement and reporting in method logs.\n\n## Rationale\n\nExecution duration in method logs is required for performance analysis and optimization.\n\n## Impact\n\nMedium - Would improve developer experience and help identify performance bottlenecks.\n\n## Relevant Documentation\n\n- Requirements: FR-DEV-003\n- Architecture: SAS 3.6 (Key Abstractions - LoggingFramework)\n- Design: SDS 2.6 (Class Diagram - LoggingFramework class)\n- Implementation: fs/method_decorators.go\n\n## Implementation Notes\n\n- Design timing measurement mechanism\n- Create data structures for storing timing information\n- Implement duration calculation\n- Add timing reporting in method logs\n- Implement threshold-based timing alerts\n- Document the execution timing implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jK_R",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 80,
    "state": "OPEN",
    "title": "Add Execution Timing in Method Logs",
    "url": "https://github.com/Auriora/OneMount/issues/80"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for parameter capture and logging implementation in method entry/exit logging.\n\n## Rationale\n\nMethod entry/exit logging with parameters and return values is required for detailed debugging and tracing.\n\n## Impact\n\nMedium - Would improve developer experience and make debugging more effective.\n\n## Relevant Documentation\n\n- Requirements: FR-DEV-002\n- Architecture: SAS 3.6 (Key Abstractions - LoggingFramework)\n- Design: SDS 2.6 (Class Diagram - LoggingFramework class)\n- Implementation: fs/method_decorators.go\n\n## Implementation Notes\n\n- Design parameter capture mechanism\n- Create data structures for storing parameter information\n- Implement parameter serialization for logging\n- Add return value capture and logging\n- Implement sensitive data masking\n- Document the parameter logging implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jKkK",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 79,
    "state": "OPEN",
    "title": "Add Method Entry/Exit Parameter Logging",
    "url": "https://github.com/Auriora/OneMount/issues/79"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for the logging framework, including class diagrams and API specifications.\n\n## Rationale\n\nA method logging framework is required for debugging and tracing code execution.\n\n## Impact\n\nMedium - Would improve developer experience and make debugging easier.\n\n## Relevant Documentation\n\n- Requirements: FR-DEV-001\n- Architecture: SAS 3.6 (Key Abstractions - LoggingFramework)\n- Design: SDS 2.6 (Class Diagram - LoggingFramework class)\n- Implementation: fs/method_decorators.go\n\n## Implementation Notes\n\n- Design method logging framework architecture\n- Create class diagrams for the logging framework\n- Define API specifications for method logging\n- Implement method entry/exit logging\n- Add parameter and return value capture\n- Document the method logging framework\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jKLL",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 78,
    "state": "OPEN",
    "title": "Add Method Logging Framework Design",
    "url": "https://github.com/Auriora/OneMount/issues/78"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for icon implementation and status mapping in Nemo.\n\n## Rationale\n\nFile status icons in the Nemo file manager are required to provide visual feedback about file synchronization status.\n\n## Impact\n\nMedium - Would improve user experience by providing visual cues about file status.\n\n## Relevant Documentation\n\n- Requirements: FR-INT-005\n- Architecture: SAS 3.5 (Key Abstractions - FileManagerIntegration)\n- Design: SDS 2.5 (Class Diagram - FileManagerIntegration class)\n- Implementation: nemo-onedriver/, ui/dbus.go\n\n## Implementation Notes\n\n- Design file status icon set\n- Create mapping between file status and icons\n- Implement D-Bus interface for status updates\n- Add icon rendering in Nemo\n- Implement status change notifications\n- Document the file status icon implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jJwU",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 77,
    "state": "OPEN",
    "title": "Add File Status Icons in Nemo File Manager",
    "url": "https://github.com/Auriora/OneMount/issues/77"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for Nemo extension implementation, including class diagrams and integration points.\n\n## Rationale\n\nNemo file manager integration is required to provide a seamless user experience for Linux users.\n\n## Impact\n\nMedium - Would improve user experience and integration with the Linux desktop environment.\n\n## Relevant Documentation\n\n- Requirements: FR-INT-004\n- Architecture: SAS 3.5 (Key Abstractions - FileManagerIntegration)\n- Design: SDS 2.5 (Class Diagram - FileManagerIntegration class)\n- Implementation: nemo-onedriver/\n\n## Implementation Notes\n\n- Design Nemo extension architecture\n- Create class diagrams for the Nemo integration\n- Define integration points with the Nemo file manager\n- Implement sidebar integration for OneDrive\n- Add context menu integration\n- Document the Nemo extension implementation\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jJVn",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 76,
    "state": "OPEN",
    "title": "Add Nemo Extension Implementation Design",
    "url": "https://github.com/Auriora/OneMount/issues/76"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for timestamp processing and age categorization in the statistics command.\n\n## Rationale\n\nFile age analysis is required to understand usage patterns and identify old or unused files in OneDrive.\n\n## Impact\n\nMedium - Would provide insights into file lifecycle and help identify archiving opportunities.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-005\n- Architecture: SAS 3.4 (Key Abstractions - StatisticsManager)\n- Design: SDS 2.4 (Class Diagram - StatisticsManager class)\n- Implementation: cmd/onedriver/statistics.go\n\n## Implementation Notes\n\n- Design algorithms for timestamp processing and age calculation\n- Create data structures for storing file age statistics\n- Implement age range classification\n- Add visualization of file age distribution\n- Include reporting of oldest and newest files\n- Add filtering options by file age\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jJAM",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 75,
    "state": "OPEN",
    "title": "Add File Age Analysis to Statistics Command",
    "url": "https://github.com/Auriora/OneMount/issues/75"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for file size categorization and reporting in the statistics command.\n\n## Rationale\n\nFile size analysis is required to understand storage usage patterns and identify large files in OneDrive.\n\n## Impact\n\nMedium - Would provide insights into storage usage and help identify optimization opportunities.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-004\n- Architecture: SAS 3.4 (Key Abstractions - StatisticsManager)\n- Design: SDS 2.4 (Class Diagram - StatisticsManager class)\n- Implementation: cmd/onedriver/statistics.go\n\n## Implementation Notes\n\n- Design algorithms for file size categorization\n- Create data structures for storing file size statistics\n- Implement size range classification\n- Add visualization of file size distribution\n- Include reporting of largest files\n- Add filtering options by file size\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jIqQ",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 74,
    "state": "OPEN",
    "title": "Add File Size Analysis to Statistics Command",
    "url": "https://github.com/Auriora/OneMount/issues/74"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for directory depth traversal and calculation in the statistics command.\n\n## Rationale\n\nDirectory depth analysis is required to understand the organization and complexity of the OneDrive folder structure.\n\n## Impact\n\nMedium - Would provide insights into folder organization and help identify deeply nested structures.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-003\n- Architecture: SAS 3.4 (Key Abstractions - StatisticsManager)\n- Design: SDS 2.4 (Class Diagram - StatisticsManager class)\n- Implementation: cmd/onedriver/statistics.go\n\n## Implementation Notes\n\n- Design algorithms for directory traversal and depth calculation\n- Create data structures for storing directory depth statistics\n- Implement recursive directory scanning\n- Add visualization of directory depth distribution\n- Include reporting of deepest directory paths\n- Add filtering options by directory depth\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jIUK",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 73,
    "state": "OPEN",
    "title": "Add Directory Depth Analysis to Statistics Command",
    "url": "https://github.com/Auriora/OneMount/issues/73"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for file type analysis algorithms and data structures in the statistics command.\n\n## Rationale\n\nFile type analysis is required to provide insights into the types of files stored in OneDrive.\n\n## Impact\n\nMedium - Would provide valuable insights into OneDrive content organization.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-002\n- Architecture: SAS 3.4 (Key Abstractions - StatisticsManager)\n- Design: SDS 2.4 (Class Diagram - StatisticsManager class)\n- Implementation: cmd/onedriver/statistics.go\n\n## Implementation Notes\n\n- Design algorithms for file type detection and categorization\n- Create data structures for storing file type statistics\n- Implement file extension analysis\n- Add MIME type detection capabilities\n- Include visualization of file type distribution\n- Add filtering options by file type\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jIBY",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 72,
    "state": "OPEN",
    "title": "Add File Type Analysis to Statistics Command",
    "url": "https://github.com/Auriora/OneMount/issues/72"
  },
  {
    "assignees": [],
    "body": "## Description\n\nAdd design details for the statistics command implementation, including class diagrams and API specifications.\n\n## Rationale\n\nStatistics functionality is required to analyze OneDrive content metadata.\n\n## Impact\n\nMedium - Would provide valuable insights into OneDrive content.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-001\n- Architecture: SAS 3.4 (Key Abstractions - StatisticsManager)\n- Design: SDS 2.4 (Class Diagram - StatisticsManager class)\n- Implementation: cmd/onedriver/statistics.go\n\n## Implementation Notes\n\n- Design and implement a statistics command\n- Create class diagrams for the statistics functionality\n- Define API specifications for statistics operations\n- Implement file metadata analysis capabilities\n- Add command-line interface for statistics\n- Include documentation for the statistics command",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jHtc",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 71,
    "state": "OPEN",
    "title": "Add Statistics Command Implementation",
    "url": "https://github.com/Auriora/OneMount/issues/71"
  },
  {
    "assignees": [],
    "body": "## Description\n\nImprove test architecture with comprehensive design for test framework, mocking, and coverage metrics.\n\n## Rationale\n\nBetter test architecture will improve code quality and maintainability.\n\n## Impact\n\nMedium - Would enhance code quality, reliability, and developer experience.\n\n## Relevant Documentation\n\n- Requirements: NFR-MNT-002, NFR-MNT-003\n- Architecture: SAS 3.6 (Key Abstractions - TestFramework)\n- Design: SDS 2.6 (Class Diagram - TestFramework class)\n- Implementation: testutil/, fs/*_test.go, cmd/*_test.go\n\n## Implementation Notes\n\n- Develop comprehensive design for test architecture\n- Implement standardized mocking framework\n- Add coverage metrics and reporting\n- Improve test documentation\n- Implement integration tests for key components\n- Add performance benchmarks for critical operations\n",
    "closed": true,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6pcFsn",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "Updated test guidelines with comprehensive test architecture information. Added sections on test architecture overview, mocking infrastructure, test coverage reporting, integration testing, and performance benchmarking.",
        "createdAt": "2025-04-30T17:16:32Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/70#issuecomment-2842712871",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc60jDxg",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 70,
    "state": "CLOSED",
    "title": "Improve Test Architecture",
    "url": "https://github.com/Auriora/OneMount/issues/70"
  },
  {
    "assignees": [],
    "body": "## Description\n\nImprove concurrency control with detailed design for worker pool management and resource limits.\n\n## Rationale\n\nBetter concurrency control will improve performance and resource utilization.\n\n## Impact\n\nMedium - Would enhance performance and stability, especially under heavy load.\n\n## Relevant Documentation\n\n- Requirements: NFR-PERF-001, NFR-REL-003\n- Architecture: SAS 3.2 (Key Abstractions - UploadManager/DownloadManager)\n- Design: SDS 2.1 (Class Diagram - UploadManager and DownloadManager classes)\n- Implementation: fs/upload_manager.go, fs/download_manager.go\n\n## Implementation Notes\n\n- Develop detailed design for worker pool management\n- Implement resource limits for concurrent operations\n- Add configuration options for concurrency settings\n- Improve error propagation in concurrent operations\n- Implement bandwidth throttling options\n- Add monitoring and metrics for concurrent operations\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jDf1",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKuA",
        "name": "stability",
        "description": "Stability improvements",
        "color": "e99695"
      }
    ],
    "number": 69,
    "state": "OPEN",
    "title": "Improve Concurrency Control",
    "url": "https://github.com/Auriora/OneMount/issues/69"
  },
  {
    "assignees": [],
    "body": "## Description\n\nImprove error handling with comprehensive design for error message standardization and rate limit handling.\n\n## Rationale\n\nBetter error handling will improve the user experience and make the application more robust.\n\n## Impact\n\nMedium - Would enhance the user experience and make the application more reliable.\n\n## Relevant Documentation\n\n- Requirements: NFR-REL-001, NFR-REL-004, NFR-USE-001\n- Architecture: SAS 3.5 (Key Abstractions - ErrorHandler)\n- Design: SDS 2.5 (Class Diagram - ErrorHandler class)\n- Implementation: fs/graph/graph_client.go, cmd/onedriver/main.go\n\n## Implementation Notes\n\n- Develop comprehensive design for error handling\n- Standardize error messages for better user experience\n- Enhance rate limit detection and handling\n- Implement request queuing for rate-limited operations\n- Add user-friendly error presentation\n- Improve logging of errors for better debugging\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jDNT",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 68,
    "state": "OPEN",
    "title": "Improve Error Handling",
    "url": "https://github.com/Auriora/OneMount/issues/68"
  },
  {
    "assignees": [],
    "body": "## Description\n\nEnhance offline functionality with improved network connectivity detection and detailed design documentation.\n\n## Rationale\n\nBetter offline functionality will improve the user experience when working with unreliable network connections.\n\n## Impact\n\nHigh - Would significantly improve reliability and user experience in offline scenarios.\n\n## Relevant Documentation\n\n- Requirements: FR-OFF-003, FR-OFF-004\n- Architecture: SAS 3.1 (Key Abstractions - OfflineManager)\n- Design: SDS 2.4 (Class Diagram - OfflineManager class)\n- Implementation: fs/offline/offline_manager.go, fs/graph/graph_client.go\n\n## Implementation Notes\n\n- Enhance network connectivity monitoring components\n- Create state transition diagrams for offline/online state changes\n- Improve synchronization process documentation\n- Add detailed conflict resolution documentation\n- Implement more robust network detection mechanisms\n- Add user feedback for network state changes\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jC4i",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMzQ",
        "name": "offline",
        "description": "Offline functionality",
        "color": "c2e0c6"
      }
    ],
    "number": 67,
    "state": "OPEN",
    "title": "Enhance Offline Functionality",
    "url": "https://github.com/Auriora/OneMount/issues/67"
  },
  {
    "assignees": [],
    "body": "## Description\n\nImprove Nemo file manager integration by adding detailed design documentation and enhancing file status icon integration.\n\n## Rationale\n\nBetter integration with the Nemo file manager will improve the user experience for users of this popular file manager.\n\n## Impact\n\nMedium - Would enhance the user experience for Nemo users and provide better visual feedback on file status.\n\n## Relevant Documentation\n\n- Requirements: FR-INT-004, FR-INT-005\n- Architecture: SAS 3.4 (Key Abstractions - FileManager Integration)\n- Design: SDS 2.3 (Class Diagram - D-Bus Interface)\n- Implementation: nemo-onedriver/, ui/dbus_interface.go\n\n## Implementation Notes\n\n- Complete the design documentation for Nemo integration\n- Enhance file status icon implementation in Nemo\n- Improve D-Bus interface for file status updates\n- Add user documentation for Nemo integration features\n- Implement testing for Nemo extension\n",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jCm7",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 66,
    "state": "OPEN",
    "title": "Improve Nemo File Manager Integration",
    "url": "https://github.com/Auriora/OneMount/issues/66"
  },
  {
    "assignees": [],
    "body": "## Description\n\nImplement a statistics command to analyze OneDrive content metadata, including file type distribution, directory depth statistics, file size distribution, and file age information.\n\n## Rationale\n\nUsers need a way to analyze their OneDrive content to better understand their storage usage and organization.\n\n## Impact\n\nMedium - Would provide valuable insights into OneDrive content and help users manage their storage more effectively.\n\n## Relevant Documentation\n\n- Requirements: FR-STAT-001, FR-STAT-002, FR-STAT-003, FR-STAT-004, FR-STAT-005\n- Architecture: SAS 3.3 (Key Abstractions - FileSystem)\n- Design: SDS 2.2 (Class Diagram - FileSystem class)\n- Implementation: cmd/onedriver/main.go, fs/filesystem.go\n\n## Implementation Notes\n\n- Add a new 'stats' command to the CLI\n- Implement file type distribution analysis\n- Implement directory depth statistics\n- Implement file size distribution analysis\n- Implement file age information analysis\n- Add reporting capabilities for the statistics results",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60jCWO",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      }
    ],
    "number": 65,
    "state": "OPEN",
    "title": "Add Statistics Functionality",
    "url": "https://github.com/Auriora/OneMount/issues/65"
  },
  {
    "assignees": [],
    "body": "# Test Sandbox Guidelines for OneMount\n\n## Overview\n\nThis document provides guidelines for using the test-sandbox directory in the OneMount project. It outlines best practices for test working folders, including proper usage, cleanup procedures, isolation between tests, naming conventions, and resource management.\n\n## Current Structure and Usage\n\nThe test-sandbox directory is currently used as the main test working folder for the OneMount project. It contains various test artifacts, including:\n\n1. **Log Files**: `fusefs_tests.log` - Contains logs from test runs\n2. **Mount Point**: `tmp/mount` - Where the filesystem is mounted during tests\n3. **Test Files**: `dmel.fa` - A large test file used for upload session tests\n4. **Authentication Tokens**: `.auth_tokens.json` - Contains authentication tokens for tests\n5. **Test Database**: `tmp` - Contains the test database and other temporary files\n6. **Content and Thumbnails**: `tmp/test/content` and `tmp/test/thumbnails` - Directories for test content and thumbnails\n\nThe test-sandbox directory is defined in `internal/testutil/test_constants.go` with the following structure:\n\n```\ntest-sandbox/                  (TestSandboxDir)\nâ”œâ”€â”€ .auth_tokens.json          (AuthTokensPath)\nâ”œâ”€â”€ dmel.fa                    (DmelfaDir)\nâ”œâ”€â”€ fusefs_tests.log           (TestLogPath)\nâ””â”€â”€ tmp/                       (TestSandboxTmpDir)\n    â”œâ”€â”€ test/\n    â”‚   â”œâ”€â”€ content/\n    â”‚   â””â”€â”€ thumbnails/\n    â””â”€â”€ mount/                 (TestMountPoint)\n        â””â”€â”€ onemount_tests/    (TestDir)\n            â””â”€â”€ delta/         (DeltaDir)\n```\n\n## Recommended Structure Outside the Project\n\nTo improve test isolation and avoid cluttering the project directory, we recommend moving the test-sandbox directory outside of the project. This can be achieved by:\n\n1. Creating a dedicated directory for test artifacts outside the project directory\n2. Updating the constants in `internal/testutil/test_constants.go` to use this external directory\n3. Ensuring all tests use the constants from `testutil` rather than hardcoded paths\n\nThe recommended structure is:\n\n```\n$HOME/.onemount-tests/                  (TestSandboxDir)\nâ”œâ”€â”€ .auth_tokens.json                   (AuthTokensPath)\nâ”œâ”€â”€ dmel.fa                             (DmelfaDir)\nâ”œâ”€â”€ logs/\nâ”‚   â””â”€â”€ fusefs_tests.log                (TestLogPath)\nâ”œâ”€â”€ tmp/                                (TestSandboxTmpDir)\nâ”‚   â”œâ”€â”€ test/\nâ”‚   â”‚   â”œâ”€â”€ content/\nâ”‚   â”‚   â””â”€â”€ thumbnails/\nâ”‚   â””â”€â”€ mount/                          (TestMountPoint)\nâ”‚       â””â”€â”€ onemount_tests/             (TestDir)\nâ”‚           â””â”€â”€ delta/                  (DeltaDir)\nâ””â”€â”€ graph_test_dir/                     (New directory for graph tests)\n```\n\n## Best Practices for Test Working Folders\n\n### Proper Usage in Tests\n\n1. **Use Constants**: Always use the constants defined in `internal/testutil/test_constants.go` rather than hardcoded paths.\n2. **Avoid Direct Manipulation**: Do not directly manipulate the test-sandbox directory in tests. Use the provided utility functions in `internal/testutil/setup.go`.\n3. **Respect Directory Structure**: Maintain the directory structure defined in the constants. Do not create additional directories or files in the test-sandbox directory unless necessary.\n4. **Test Isolation**: Each test should operate in its own subdirectory to avoid conflicts with other tests.\n5. **Resource Limits**: Be mindful of resource usage, especially when creating large files or many small files.\n\n### Cleanup Procedures\n\n1. **Clean Up After Tests**: Always clean up any files or directories created during tests.\n2. **Use t.Cleanup()**: Use the `t.Cleanup()` function to register cleanup functions that will be called even if tests fail.\n3. **Temporary Files**: Store temporary files in the `tmp` directory, which is cleaned up between test runs.\n4. **Persistent Files**: Store files that need to persist between test runs (e.g., authentication tokens) in the root of the test-sandbox directory.\n5. **Unmount Before Cleanup**: Always unmount the filesystem before attempting to clean up the mount point.\n\n### Isolation Between Tests\n\n1. **Unique Test Directories**: Each test should use a unique directory to avoid conflicts with other tests.\n2. **Parallel Tests**: When running tests in parallel, ensure they do not share resources.\n3. **Clean State**: Start each test with a clean state by removing and recreating test directories.\n4. **Independent Tests**: Tests should not depend on the state created by other tests.\n5. **Mock Dependencies**: Use mock implementations of external dependencies to improve isolation.\n\n### Naming Conventions\n\n1. **Descriptive Names**: Use descriptive names for test files and directories.\n2. **Test-Specific Prefixes**: Prefix test files and directories with the test name to avoid conflicts.\n3. **Temporary File Suffix**: Use a `.tmp` suffix for temporary files.\n4. **Test Data Files**: Store test data files in a `testdata` directory.\n5. **Log Files**: Store log files in a `logs` directory with descriptive names.\n\n### Resource Management\n\n1. **Limit File Sizes**: Keep test files as small as possible while still being useful for testing.\n2. **Clean Up Resources**: Always clean up resources after tests, especially large files.\n3. **Reuse Test Files**: Reuse test files when possible instead of creating new ones.\n4. **Monitor Resource Usage**: Use the profiler to monitor resource usage during tests.\n5. **Limit Concurrent Operations**: Use semaphores to limit concurrent operations and prevent resource exhaustion.\n\n## Specific Recommendations for Test Artifacts\n\n### fusefs_tests.log\n\n- Move to `$HOME/.onemount-tests/logs/fusefs_tests.log`\n- Implement log rotation to prevent the log file from growing too large\n- Add timestamps to log entries for better debugging\n\n### mount-point\n\n- Move to `$HOME/.onemount-tests/tmp/mount`\n- Ensure it's unmounted and cleaned up after tests\n- Use a unique mount point for each test run to avoid conflicts\n\n### dmel.fa\n\n- Move to `$HOME/.onemount-tests/dmel.fa`\n- Consider generating this file on demand instead of storing it\n- Implement a mechanism to verify the file's integrity before using it\n\n### graph_test_dir\n\n- Create a new directory at `$HOME/.onemount-tests/graph_test_dir`\n- Use this directory for graph API tests\n- Implement proper cleanup procedures for this directory\n\n### test/\n\n- Move to `$HOME/.onemount-tests/tmp/test`\n- Ensure it's cleaned up between test runs\n- Use subdirectories for different types of tests (e.g., content, thumbnails)\n\n## Implementation Considerations\n\nWhen implementing these recommendations, consider the following:\n\n1. **Backward Compatibility**: Ensure that existing tests continue to work with the new structure.\n2. **Environment Variables**: Use environment variables to allow overriding the test-sandbox location.\n3. **Documentation**: Update documentation to reflect the new structure and best practices.\n4. **CI/CD Integration**: Ensure that CI/CD pipelines are updated to use the new structure.\n5. **Test Helpers**: Create helper functions to simplify working with the new structure.\n\n## Conclusion\n\nMoving the test-sandbox directory outside of the project will improve test isolation, reduce clutter in the project directory, and make it easier to manage test artifacts. By following the best practices outlined in this document, we can ensure that tests are reliable, maintainable, and efficient.",
    "closed": false,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6pcYkI",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "I've created a comprehensive document with best practice recommendations for test-sandbox usage: [Test Sandbox Guidelines](/docs/guides/test-sandbox-guidelines.md)\\n\\nThe document includes:\\n\\n1. An overview of the current structure and usage of the test-sandbox directory\\n2. A recommended structure for moving the test-sandbox directory outside the project to `/home/bcherrington/.onemount-tests/`\\n3. Best practices for test working folders\\n4. Specific recommendations for each of the artifacts mentioned in the issue:\\n   - fusefs_tests.log â†’ `/home/bcherrington/.onemount-tests/logs/fusefs_tests.log`\\n   - mount-point â†’ `/home/bcherrington/.onemount-tests/tmp/mount`\\n   - dmel.fa â†’ `/home/bcherrington/.onemount-tests/dmel.fa`\\n   - graph_test_dir â†’ `/home/bcherrington/.onemount-tests/graph_test_dir`\\n   - test/ â†’ `/home/bcherrington/.onemount-tests/tmp/test`\\n5. Implementation considerations\\n\\nAs requested, I have not implemented any changes yet. This document serves as a guide for the future implementation.",
        "createdAt": "2025-04-30T17:32:54Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/63#issuecomment-2842790152",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc60if1z",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 63,
    "state": "OPEN",
    "title": "Create a testing folder structure outside of the project for all testing artifacts",
    "url": "https://github.com/Auriora/OneMount/issues/63"
  },
  {
    "assignees": [],
    "body": "Description\n\nAdd a feature to show notifications on the window manager using D-Bus notification system. This will keep users informed about important events and status changes in the application.\n\nRationale\n\nDesktop notifications are a standard way to communicate important events to users without interrupting their workflow. This feature will improve user experience by providing timely information about synchronization status, errors, and other relevant events.\n\nImpact\n\nMedium - Would significantly enhance user awareness of application events and status changes.\n\nRelevant Documentation\n\n    Requirements: SRS 2.3.6 (Notification Requirements)\n    Architecture: SAS 3.2.3 (Notification System Integration)\n    Design: SDS 4.5 (D-Bus Notification Implementation)\n    Implementation: ui/notifications.go\n\nImplementation Notes\n\n    Research D-Bus notification API and libraries for Go\n    Define a list of events that should trigger notifications\n    Implement notification sending for different event types\n    Add appropriate icons for different notification types\n    Ensure notifications respect system settings (do not disturb mode)\n    Test on various desktop environments (GNOME, KDE, XFCE)\n    Document the notification types and their meanings",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iPCm",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMqA",
        "name": "notifications",
        "description": "Notification-related features",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      }
    ],
    "number": 62,
    "state": "OPEN",
    "title": "Add a feature to show notifications on the window manager using dbus notification",
    "url": "https://github.com/Auriora/OneMount/issues/62"
  },
  {
    "assignees": [],
    "body": "Description\n\nAdd a system tray icon to show the current state of onedriver and to open the launcher. This will provide users with quick access to the application status and controls.\n\nRationale\n\nSystem tray icons are a standard way for background services to communicate status and provide quick access to controls. This feature will improve user experience by making the application state more visible and accessible.\n\nImpact\n\nMedium - Would significantly enhance user visibility and control of the application.\n\nRelevant Documentation\n\n    Requirements: SRS 2.3.5 (System Integration Requirements)\n    Architecture: SAS 3.2.2 (Desktop Environment Integration)\n    Design: SDS 4.4 (System Tray Implementation)\n    Implementation: ui/tray_icon.go\n\nImplementation Notes\n\n    Research GTK3/libappindicator for system tray integration\n    Design icons for different application states (connected, syncing, offline, error)\n    Implement state monitoring and icon updates\n    Create a context menu for the tray icon with common actions\n    Add functionality to open the launcher from the tray icon\n    Test on various desktop environments (GNOME, KDE, XFCE)\n    Document the tray icon features and behaviors",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iOZj",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 61,
    "state": "OPEN",
    "title": "Add a system tray icon to showe the current state and to open the launcher",
    "url": "https://github.com/Auriora/OneMount/issues/61"
  },
  {
    "assignees": [],
    "body": "Description\n\nAdd a context menu to Nemo to carry out actions on files, folders and the mount-point. This will enhance user experience by providing quick access to common operations directly from the file manager.\n\nRationale\n\nUsers expect context menu integration in file managers for quick access to application-specific actions. This feature will improve usability and align with standard desktop application behaviors.\n\nImpact\n\nMedium - Would significantly improve user experience and workflow efficiency.\n\nRelevant Documentation\n\n    Requirements: SRS 2.3.4 (User Interface Requirements)\n    Architecture: SAS 3.2.1 (File Manager Integration)\n    Design: SDS 4.3 (Context Menu Implementation)\n    Implementation: ui/nemo_extension.py\n\nImplementation Notes\n\n    Research Nemo extension API for context menu integration\n    Define appropriate actions for files, folders, and mount points\n    Implement handlers for each action\n    Add icons for context menu items\n    Test with various file types and folder structures\n    Document the available context menu options",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iN_P",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      }
    ],
    "number": 60,
    "state": "OPEN",
    "title": "Add a context menu to Nemo to carry out actions on files, folders and the mount-point",
    "url": "https://github.com/Auriora/OneMount/issues/60"
  },
  {
    "assignees": [],
    "body": "**Description**\nAdopt a consistent error-wrapping and logging strategy using Go's standard `errors` package or a chosen wrapper library.\n\n**Rationale**\nUniform patterns make it easier to trace errors and produce structured logs.\n\n**Impact**\nLow â€“ Changes are largely mechanical but improve observability.\n\n**Implementation Notes**\n- Audit all `if err != nil` blocks and apply a standard wrap.\n- Centralize log formatting (timestamp, level, module).\n- Remove any inconsistent or duplicate logging calls.\n- Add tests to verify error chains where appropriate.",
    "closed": true,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6q0IFm",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "# Issue #59: Standardize Error Handling Across Modules - Implementation Complete\n\nI've completed the implementation of standardized error handling across the OneMount project. Here's a summary of the work done:\n\n## Changes Made\n\n1. **Created Standardized Error Handling Package**\n   - Implemented `internal/common/errors` package with standardized error handling functions\n   - Added specialized error types for common error scenarios (NetworkError, NotFoundError, AuthError, etc.)\n   - Implemented structured logging with context propagation\n   - Added comprehensive tests for all new functionality\n\n2. **Updated Key Files with Standardized Error Handling**\n   - Updated `internal/fs/graph/graph.go` with specialized error types and structured logging\n   - Updated `internal/fs/thumbnail_operations.go` with standardized error handling\n   - Updated `internal/fs/metadata_operations.go` with standardized error handling\n   - Updated several other files in the `internal/fs` directory\n\n3. **Created Documentation**\n   - Created comprehensive error handling guidelines\n   - Created examples of using specialized error types\n   - Created examples of structured logging\n   - Created a plan for monitoring and refining error handling based on real-world usage\n\n## Benefits\n\n1. **Improved Traceability**: Errors now maintain their chain, making it easier to trace the root cause\n2. **Consistent Logging**: Standardized field names and logging patterns make logs more consistent and easier to parse\n3. **Reduced Duplication**: Common error handling patterns are now centralized in a single package\n4. **Better Context**: Errors now include more context about where and why they occurred\n5. **Type Safety**: Specialized error types make it easier to handle specific error conditions\n\n## Next Steps\n\nWhile the core implementation is complete, there are still some files that need to be updated with the new error handling patterns. I've created a plan for completing this work:\n\n1. **Continue Updating Remaining Files**\n   - Focus on high-traffic code paths and error-prone areas\n   - Prioritize files in the `internal/fs` directory that handle user operations\n   - Update test files to use the new error handling patterns\n\n2. **Expand Structured Logging Implementation**\n   - Add more context information to logs for better debugging\n   - Ensure consistent use of field names across all modules\n   - Implement request tracing for operations that span multiple components\n\n3. **Monitor and Refine Error Handling**\n   - Collect feedback from developers using the new error handling patterns\n   - Identify any additional specialized error types needed\n   - Refine documentation based on common questions and issues\n\n## Documentation\n\nI've created the following documentation to help developers understand and use the new error handling patterns:\n\n1. **Error Handling Guidelines**: A comprehensive guide to error handling in the OneMount project\n2. **Error Handling Examples**: Examples of how to use the standardized error handling approach\n3. **Error Handling Monitoring Plan**: A plan for monitoring and refining error handling based on real-world usage\n\n## Conclusion\n\nThe standardized error handling implementation has significantly improved the quality and maintainability of the OneMount codebase. By providing a comprehensive set of error handling utilities, specialized error types, and structured logging capabilities, we've established a consistent approach to error handling across the project.\n\nThe implementation in key files demonstrates how these patterns can be applied to improve error handling in complex, error-prone areas of the codebase. By continuing to roll out these patterns to the rest of the codebase, we'll further enhance the reliability and maintainability of the OneMount project.",
        "createdAt": "2025-05-09T09:12:32Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/59#issuecomment-2865791334",
        "viewerDidAuthor": true
      },
      {
        "id": "IC_kwDOOgHwEc6q0IRI",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "Closing this issue as the implementation is complete. The standardized error handling has been implemented across the codebase, with comprehensive documentation and a plan for future improvements.",
        "createdAt": "2025-05-09T09:12:48Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/59#issuecomment-2865792072",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc60iLTa",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNLw",
        "name": "logging",
        "description": "Logging improvements",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mBQ",
        "name": "refactor",
        "description": "Code improvements without changing functionality",
        "color": "E99695"
      }
    ],
    "number": 59,
    "state": "CLOSED",
    "title": "Standardize Error Handling Across Modules",
    "url": "https://github.com/Auriora/OneMount/issues/59"
  },
  {
    "assignees": [],
    "body": "**Description**\nReplace raw goroutine launches with context-aware `go func(ctx)` patterns and use `sync.WaitGroup` to manage shutdown.\n\n**Rationale**\nGraceful shutdown prevents orphaned goroutines and resource leaks, improving reliability on exit or reload.\n\n**Impact**\nMedium â€“ Changes to concurrency model; tests will need updating.\n\n**Implementation Notes**\n- Pass `context.Context` from `main` into all long-running routines.\n- Use `select { case <-ctx.Done(): return }` in loops.\n- Signal cancellation on SIGINT/SIGTERM.\n- Update integration tests to verify shutdown behavior.",
    "closed": true,
    "comments": [
      {
        "id": "IC_kwDOOgHwEc6qzPsh",
        "author": {
          "login": "bcherrington"
        },
        "authorAssociation": "MEMBER",
        "body": "# Implementation Completed\n\nI've implemented context-based concurrency cancellation throughout the codebase as requested in this issue. This ensures graceful shutdown of all goroutines, preventing orphaned goroutines and resource leaks.\n\n## Changes Made\n\n### 1. Main Application Flow\n- Modified `main.go` to create a root context that can be canceled\n- Updated `setupSignalHandler` to cancel the context when a signal is received\n- Ensured proper context propagation to all subsystems\n\n### 2. Filesystem Initialization\n- Updated `NewFilesystemWithContext` to accept and propagate a context\n- Added context cancellation support to all filesystem operations\n- Created a backward-compatible `NewFilesystem` function that uses a background context\n\n### 3. Delta Synchronization\n- Enhanced `DeltaLoop` to check for context cancellation at critical points\n- Added proper context handling in `pollDeltas` to prevent hanging during shutdown\n- Implemented graceful shutdown of the delta loop with timeout\n\n### 4. Background Operations\n- Added context checks to thumbnail caching operations\n- Updated `ProcessOfflineChangesWithContext` to support cancellation\n- Ensured all long-running operations check for context cancellation\n\n### 5. Resource Management\n- Added proper `sync.WaitGroup` usage to track all goroutines\n- Implemented stop functions for all managers (cache cleanup, delta loop, download manager, upload manager)\n- Added timeout-based shutdown to prevent hanging during exit\n\n## Benefits\n1. **Graceful Shutdown**: All goroutines now properly terminate during application shutdown\n2. **Resource Cleanup**: Prevents resource leaks by ensuring all operations can be cancelled\n3. **Improved Reliability**: Better handling of application exit and reload scenarios\n4. **Cancellation Propagation**: Context cancellation now properly propagates to all subsystems\n\n## Testing\nThe changes have been tested to ensure:\n- All goroutines properly terminate on application shutdown\n- No resource leaks occur during normal operation or shutdown\n- Backward compatibility is maintained for existing code\n- Long-running operations can be cancelled when needed\n\nClosing this issue as the implementation is complete.",
        "createdAt": "2025-05-09T08:01:48Z",
        "includesCreatedEdit": false,
        "isMinimized": false,
        "minimizedReason": "",
        "reactionGroups": [],
        "url": "https://github.com/Auriora/OneMount/issues/58#issuecomment-2865560353",
        "viewerDidAuthor": true
      }
    ],
    "id": "I_kwDOOgHwEc60iLSU",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9nKA",
        "name": "concurrency",
        "description": "Changes related to concurrent operations",
        "color": "D4C5F9"
      }
    ],
    "number": 58,
    "state": "CLOSED",
    "title": "Implement Context-Based Concurrency Cancellation",
    "url": "https://github.com/Auriora/OneMount/issues/58"
  },
  {
    "assignees": [],
    "body": "**Description**\nAdd new table-driven unit tests and integration tests to raise overall coverage to at least 80%, focusing especially on error paths, boundary conditions, and concurrency scenarios.\n\n**Rationale**\nHigher coverage provides confidence in code correctness and reduces regressions.\n\n**Impact**\nMedium â€“ Requires writing many new tests but does not change production code.\n\n**Implementation Notes**\n- Use Go's `testing` package with sub-tests (`t.Run`).\n- Add mocks for injected interfaces to simulate failures.\n- Include tests for `DeltaLoop` cancellation once context support is added.\n- Add Python extension tests if applicable.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iLRR",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 57,
    "state": "OPEN",
    "title": "Increase Test Coverage to â‰¥ 80%",
    "url": "https://github.com/Auriora/OneMount/issues/57"
  },
  {
    "assignees": [],
    "body": "**Description**\nImprove `README.md` and `docs/DEVELOPMENT.md` by adding a table of contents, contribution guidelines, code-of-conduct, and a high-level architecture diagram.\n\n**Rationale**\nBetter onboarding for new contributors and clearer governance helps grow the community around the project.\n\n**Impact**\nLow â€“ Documentation only.\n\n**Implementation Notes**\n- Generate a TOC via markdown-anchor links.\n- Write `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.\n- Sketch a simple UML/service-diagram and embed in `docs/`.\n- Add badges (build status, coverage) to `README.md`.",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc60iLQG",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dT1A",
        "name": "good first issue",
        "description": "Good for newcomers",
        "color": "7057ff"
      }
    ],
    "number": 56,
    "state": "CLOSED",
    "title": "Enhance Project Documentation",
    "url": "https://github.com/Auriora/OneMount/issues/56"
  },
  {
    "assignees": [],
    "body": "**Description**\nDefine interfaces for all external dependencies and pass concrete implementations in at startup rather than instantiating them directly.\n\n**Rationale**\nThis decoupling makes it possible to mock external services in tests and swap implementations more easily.\n\n**Impact**\nMedium â€“ Changes to constructors and service signatures; improves test coverage.\n\n**Implementation Notes**\n- Create interfaces (e.g., `type GraphClient interface { â€¦ }`) in `internal/api`.\n- Refactor existing code to depend on interfaces.\n- Provide default implementations in `pkg/graph`.\n- Update CI to include interface-based mocks in unit tests.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iLO5",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mBQ",
        "name": "refactor",
        "description": "Code improvements without changing functionality",
        "color": "E99695"
      }
    ],
    "number": 55,
    "state": "OPEN",
    "title": "Introduce Dependency Injection for External Clients",
    "url": "https://github.com/Auriora/OneMount/issues/55"
  },
  {
    "assignees": [],
    "body": "**Description**\nExtract large, multi-responsibility functions from `cmd/onedriver/main.go` into dedicated service types (`AuthService`, `FilesystemService`, `StatsService`).\n\n**Rationale**\nReducing function size and adhering to Single Responsibility Principle improves readability, testability, and future maintainability.\n\n**Impact**\nMedium â€“ Significant internal restructuring, but public CLI behavior should be preserved.\n\n**Implementation Notes**\n- Define service interfaces in `internal/services`.\n- Move setup and teardown logic into methods on those services.\n- Wire them together in `main.go` via constructor injection.\n- Add unit tests against each new service.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iLNs",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mBQ",
        "name": "refactor",
        "description": "Code improvements without changing functionality",
        "color": "E99695"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mTg",
        "name": "code-quality",
        "description": "Improvements to code quality and maintainability",
        "color": "4BA3CF"
      }
    ],
    "number": 54,
    "state": "OPEN",
    "title": "Refactor main.go into Discrete Services",
    "url": "https://github.com/Auriora/OneMount/issues/54"
  },
  {
    "assignees": [],
    "body": "**Description**\nReorganize the repository to follow the conventional Go layout by introducing an `internal/` directory for non-public packages and a `pkg/` directory for shared libraries.\n\n**Rationale**\nEnforcing package encapsulation reduces accidental API exposure and aligns the project with community best practices.\n\n**Impact**\nLow â€“ Code imports will need updating, but overall behavior remains unchanged.\n\n**Implementation Notes**\n- Create `internal/fs`, `internal/ui`, etc., and move all non-public packages there.\n- Create `pkg/utils` for any packages intended for external reuse.\n- Update all import paths accordingly.\n- Add a note in `README.md` about the new layout.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iLMv",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJVg",
        "name": "architecture",
        "description": "Related to system architecture",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_L9mBQ",
        "name": "refactor",
        "description": "Code improvements without changing functionality",
        "color": "E99695"
      }
    ],
    "number": 53,
    "state": "OPEN",
    "title": "Adopt Standard Go Project Layout",
    "url": "https://github.com/Auriora/OneMount/issues/53"
  },
  {
    "assignees": [],
    "body": "**Description**\nImprove `README.md` and `docs/DEVELOPMENT.md` by adding a table of contents, contribution guidelines, code-of-conduct, and a high-level architecture diagram.\n\n**Rationale**\nBetter onboarding for new contributors and clearer governance helps grow the community around the project.\n\n**Impact**\nLow â€“ Documentation only.\n\n**Implementation Notes**\n- Generate a TOC via markdown-anchor links.\n- Write `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.\n- Sketch a simple UML/service-diagram and embed in `docs/`.\n- Add badges (build status, coverage) to `README.md`.",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60iIo2",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dT1A",
        "name": "good first issue",
        "description": "Good for newcomers",
        "color": "7057ff"
      }
    ],
    "number": 52,
    "state": "OPEN",
    "title": "Enhance Project Documentation",
    "url": "https://github.com/Auriora/OneMount/issues/52"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a comprehensive upgrade guide for major versions to improve user experience for upgrades.\n\n## Rationale\nUsers should be able to upgrade smoothly between versions.\n\n## Impact\nMedium - Would improve user experience for upgrades.\n\n## Relevant Documentation\n- **Requirements**: NFR-USE-003\n- **Architecture**: SAS 3.5 (Deployment View)\n- **Design**: N/A\n- **Implementation**: N/A\n\n## Implementation Notes\n- Document breaking changes between major versions\n- Create step-by-step upgrade procedures\n- Address data migration considerations\n- Include troubleshooting for common upgrade issues\n- Test upgrade procedures on various distributions",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XUGm",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 51,
    "state": "OPEN",
    "title": "Create a comprehensive upgrade guide for major versions",
    "url": "https://github.com/Auriora/OneMount/issues/51"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for containerized deployment to facilitate deployment in container environments.\n\n## Rationale\nWould facilitate deployment in container environments.\n\n## Impact\nLow - Would provide more deployment options.\n\n## Relevant Documentation\n- **Requirements**: N/A (New feature)\n- **Architecture**: SAS 3.5 (Deployment View)\n- **Design**: N/A (New feature)\n- **Implementation**: N/A (New feature)\n\n## Implementation Notes\n- Create Dockerfile for containerized deployment\n- Address FUSE access in containerized environments\n- Implement volume mounting for persistent storage\n- Document container deployment options\n- Test with various container orchestration systems",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XUFi",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOIw",
        "name": "deployment",
        "description": "Deployment improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOSg",
        "name": "containers",
        "description": "Container-related features",
        "color": "c2e0c6"
      }
    ],
    "number": 50,
    "state": "OPEN",
    "title": "Add support for containerized deployment",
    "url": "https://github.com/Auriora/OneMount/issues/50"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement automatic updates for the application to ensure users have the latest features and fixes.\n\n## Rationale\nUsers should be able to easily update to new versions.\n\n## Impact\nMedium - Would ensure users have the latest features and fixes.\n\n## Relevant Documentation\n- **Requirements**: N/A (New feature)\n- **Architecture**: SAS 3.5 (Deployment View)\n- **Design**: N/A (New feature)\n- **Implementation**: N/A (New feature)\n\n## Implementation Notes\n- Research update mechanisms for Linux applications\n- Implement version checking against releases\n- Add user notification for available updates\n- Implement secure download and verification of updates\n- Add configuration options for update behavior",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XUCx",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN4w",
        "name": "packaging",
        "description": "Packaging improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 49,
    "state": "OPEN",
    "title": "Implement automatic updates for the application",
    "url": "https://github.com/Auriora/OneMount/issues/49"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate Flatpak and Snap packages to provide universal installation options.\n\n## Rationale\nWould provide universal installation options.\n\n## Impact\nMedium - Would make installation easier on various distributions.\n\n## Relevant Documentation\n- **Requirements**: NFR-USE-003\n- **Architecture**: SAS 3.5 (Deployment View)\n- **Design**: N/A\n- **Implementation**: N/A (New feature)\n\n## Implementation Notes\n- Research Flatpak and Snap packaging requirements\n- Create Flatpak manifest\n- Create Snap configuration\n- Test packages on various distributions\n- Document installation and usage of packaged versions",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XUBc",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN4w",
        "name": "packaging",
        "description": "Packaging improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOAw",
        "name": "distribution",
        "description": "Distribution improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 48,
    "state": "OPEN",
    "title": "Create Flatpak and Snap packages",
    "url": "https://github.com/Auriora/OneMount/issues/48"
  },
  {
    "assignees": [],
    "body": "## Description\nImprove installation process with better dependency management to make installation straightforward across distributions.\n\n## Rationale\nInstallation should be straightforward across distributions.\n\n## Impact\nMedium - Would improve user experience for installation.\n\n## Relevant Documentation\n- **Requirements**: NFR-USE-003\n- **Architecture**: SAS 3.5.2 (Physical Nodes - Required Libraries)\n- **Design**: SDS 6.1 (Dependencies)\n- **Implementation**: Makefile, pkg/debian, onedriver.spec\n\n## Implementation Notes\n- Audit current dependencies and minimize where possible\n- Implement version checking for critical dependencies\n- Add fallbacks for optional dependencies\n- Create comprehensive installation documentation\n- Test installation process on various distributions",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XUAR",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN4w",
        "name": "packaging",
        "description": "Packaging improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 47,
    "state": "OPEN",
    "title": "Improve installation process with better dependency management",
    "url": "https://github.com/Auriora/OneMount/issues/47"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for WebDAV as an alternative access method to provide compatibility with applications that support WebDAV.\n\n## Rationale\nWould provide compatibility with applications that support WebDAV.\n\n## Impact\nMedium - Would broaden application compatibility.\n\n## Relevant Documentation\n- **Requirements**: N/A (New feature)\n- **Architecture**: SAS 3.1.3 (System Interfaces)\n- **Design**: N/A (New feature)\n- **Implementation**: N/A (New feature)\n\n## Implementation Notes\n- Research WebDAV protocol requirements\n- Implement WebDAV server functionality\n- Add authentication integration with existing OAuth flow\n- Test with WebDAV clients (browsers, file managers, office applications)\n- Document WebDAV endpoint configuration and usage",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT-r",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNiA",
        "name": "integration",
        "description": "Integration with other systems",
        "color": "1d76db"
      }
    ],
    "number": 46,
    "state": "CLOSED",
    "title": "Add support for WebDAV as an alternative access method",
    "url": "https://github.com/Auriora/OneMount/issues/46"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement better handling of special file types to improve compatibility with various applications.\n\n## Rationale\nSome file types may require special handling.\n\n## Impact\nMedium - Would improve compatibility with various applications.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-002\n- **Architecture**: SAS 3.2.1 (Logical Components - Filesystem Implementation)\n- **Design**: SDS 2.1 (Class Diagram - Inode class)\n- **Implementation**: fs/file_operations.go\n\n## Implementation Notes\n- Identify file types that need special handling (symlinks, pipes, sockets)\n- Implement proper handling for these file types\n- Add support for file type detection\n- Test with applications that use special file types\n- Document limitations and workarounds",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT9V",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKBg",
        "name": "compatibility",
        "description": "Compatibility improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPOew",
        "name": "filesystem",
        "description": "Filesystem-related changes",
        "color": "1d76db"
      }
    ],
    "number": 45,
    "state": "OPEN",
    "title": "Implement better handling of special file types",
    "url": "https://github.com/Auriora/OneMount/issues/45"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for more desktop environments to improve usability across different environments.\n\n## Rationale\nSystem should integrate well with various desktop environments.\n\n## Impact\nMedium - Would improve usability across different environments.\n\n## Relevant Documentation\n- **Requirements**: NFR-USE-002\n- **Architecture**: SAS 3.1.2 (External Entities - Desktop Environment)\n- **Design**: SDS 2.2 (Component Diagram - User Interface package)\n- **Implementation**: ui/onedriver.go, ui/systemd\n\n## Implementation Notes\n- Test with major desktop environments (GNOME, KDE, XFCE, MATE)\n- Implement desktop-specific integration features\n- Ensure consistent appearance across environments\n- Add support for desktop-specific notification systems\n- Document desktop environment compatibility",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT7-",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKBg",
        "name": "compatibility",
        "description": "Compatibility improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 44,
    "state": "OPEN",
    "title": "Add support for more desktop environments",
    "url": "https://github.com/Auriora/OneMount/issues/44"
  },
  {
    "assignees": [],
    "body": "## Description\nEnhance compatibility with different Linux distributions to broaden the user base.\n\n## Rationale\nSystem should work well across various distributions.\n\n## Impact\nHigh - Would broaden the user base.\n\n## Relevant Documentation\n- **Requirements**: NFR-USE-002\n- **Architecture**: SAS 3.5.2 (Physical Nodes - Operating System)\n- **Design**: SDS 6.1 (Dependencies)\n- **Implementation**: Makefile, pkg/debian, onedriver.spec\n\n## Implementation Notes\n- Test on major distributions (Ubuntu, Fedora, Arch, Debian)\n- Address distribution-specific dependencies\n- Create distribution-specific installation guides\n- Implement fallbacks for missing system components\n- Document known issues and workarounds for each distribution",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT6g",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKBg",
        "name": "compatibility",
        "description": "Compatibility improvements",
        "color": "c2e0c6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN4w",
        "name": "packaging",
        "description": "Packaging improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 43,
    "state": "OPEN",
    "title": "Enhance compatibility with different Linux distributions",
    "url": "https://github.com/Auriora/OneMount/issues/43"
  },
  {
    "assignees": [],
    "body": "## Description\nImprove integration with various Linux file managers to enhance user experience.\n\n## Rationale\nBetter file manager integration would improve user experience.\n\n## Impact\nMedium - Would make the system more user-friendly.\n\n## Relevant Documentation\n- **Requirements**: FR-INT-004, FR-INT-005\n- **Architecture**: SAS 3.1.2 (External Entities - Desktop Environment)\n- **Design**: SDS 2.2 (Component Diagram - User Interface package)\n- **Implementation**: nemo-onedriver/src\n\n## Implementation Notes\n- Research integration options for popular file managers (Nautilus, Dolphin, Thunar)\n- Implement file manager extensions for status icons\n- Add context menu integration for common operations\n- Ensure consistent behavior across different file managers\n- Document installation and configuration for each file manager",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT4t",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNiA",
        "name": "integration",
        "description": "Integration with other systems",
        "color": "1d76db"
      }
    ],
    "number": 42,
    "state": "OPEN",
    "title": "Improve integration with various Linux file managers",
    "url": "https://github.com/Auriora/OneMount/issues/42"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for shared folders and collaboration features to enable team collaboration workflows.\n\n## Rationale\nWould improve usability for collaborative scenarios.\n\n## Impact\nHigh - Would enable team collaboration workflows.\n\n## Relevant Documentation\n- **Requirements**: N/A (New feature)\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API)\n- **Design**: SDS 4.2 (API Endpoints/Methods)\n- **Implementation**: fs/graph/graph.go, fs/graph/drive_item.go\n\n## Implementation Notes\n- Implement support for shared folder discovery\n- Add handling for shared item permissions\n- Implement collaboration status indicators\n- Add support for sharing links\n- Test with various sharing scenarios",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT3f",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPN3w",
        "name": "collaboration",
        "description": "Collaboration features",
        "color": "c2e0c6"
      }
    ],
    "number": 41,
    "state": "OPEN",
    "title": "Add support for shared folders and collaboration features",
    "url": "https://github.com/Auriora/OneMount/issues/41"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement bandwidth throttling options to provide more control over resource usage.\n\n## Rationale\nUsers may want to limit bandwidth usage.\n\n## Impact\nMedium - Would provide more control over resource usage.\n\n## Relevant Documentation\n- **Requirements**: NFR-PERF-001\n- **Architecture**: SAS 3.2.3 (Key Abstractions - UploadManager/DownloadManager)\n- **Design**: SDS 2.1 (Class Diagram - UploadManager and DownloadManager classes)\n- **Implementation**: fs/upload_manager.go, fs/download_manager.go\n\n## Implementation Notes\n- Add configuration options for bandwidth limits\n- Implement rate limiting for uploads and downloads\n- Add UI for configuring bandwidth usage\n- Implement time-based throttling (e.g., different limits during work hours)\n- Add monitoring of bandwidth usage",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XT2M",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      }
    ],
    "number": 40,
    "state": "OPEN",
    "title": "Implement bandwidth throttling options",
    "url": "https://github.com/Auriora/OneMount/issues/40"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for OneDrive for Business special folders to improve compatibility with business accounts.\n\n## Rationale\nBusiness accounts have special folders that may require special handling.\n\n## Impact\nMedium - Would improve compatibility with business accounts.\n\n## Relevant Documentation\n- **Requirements**: N/A (New feature)\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API)\n- **Design**: SDS 4.2 (API Endpoints/Methods)\n- **Implementation**: fs/graph/drive_item.go\n\n## Implementation Notes\n- Research OneDrive for Business special folders\n- Implement special handling for these folders\n- Add icons or indicators for special folders\n- Test with various business account configurations\n- Document business account features",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTwZ",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNuQ",
        "name": "business",
        "description": "Business features",
        "color": "c2e0c6"
      }
    ],
    "number": 39,
    "state": "OPEN",
    "title": "Add support for OneDrive for Business special folders",
    "url": "https://github.com/Auriora/OneMount/issues/39"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement selective sync for specific folders to provide more flexibility for users.\n\n## Rationale\nUsers may want to sync only certain folders.\n\n## Impact\nHigh - Would provide more flexibility for users.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-004\n- **Architecture**: SAS 3.2.1 (Logical Components - Filesystem Implementation)\n- **Design**: SDS 2.1 (Class Diagram - Filesystem class)\n- **Implementation**: fs/fs.go, fs/cache.go\n\n## Implementation Notes\n- Add configuration options for selective sync\n- Implement UI for selecting folders to sync\n- Modify delta synchronization to respect sync settings\n- Add persistence for sync preferences\n- Test with various folder structures",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTvE",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      }
    ],
    "number": 38,
    "state": "OPEN",
    "title": "Implement selective sync for specific folders",
    "url": "https://github.com/Auriora/OneMount/issues/38"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for SharePoint integration to extend functionality to SharePoint libraries.\n\n## Rationale\nWould extend functionality to SharePoint libraries.\n\n## Impact\nHigh - Would broaden the system's applicability.\n\n## Relevant Documentation\n- **Requirements**: N/A (New feature)\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API)\n- **Design**: SDS 4.2 (API Endpoints/Methods)\n- **Implementation**: fs/graph/graph.go\n\n## Implementation Notes\n- Research SharePoint API differences from OneDrive\n- Implement SharePoint-specific authentication\n- Add support for SharePoint-specific metadata\n- Test with various SharePoint configurations\n- Document SharePoint integration features",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTt9",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNUA",
        "name": "feature",
        "description": "New features",
        "color": "0366d6"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNiA",
        "name": "integration",
        "description": "Integration with other systems",
        "color": "1d76db"
      }
    ],
    "number": 37,
    "state": "OPEN",
    "title": "Add support for SharePoint integration",
    "url": "https://github.com/Auriora/OneMount/issues/37"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a contribution guide with coding standards to ensure consistent code quality from contributors.\n\n## Rationale\nWould ensure consistent code quality from contributors.\n\n## Impact\nMedium - Would maintain code quality standards.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-001, NFR-MNT-004\n- **Architecture**: SAS 3.3.3 (Development Environment)\n- **Design**: N/A\n- **Implementation**: N/A\n\n## Implementation Notes\n- Define coding standards for the project\n- Document Git workflow for contributions\n- Create pull request templates\n- Define review process\n- Include examples of good and bad practices",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTss",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 36,
    "state": "OPEN",
    "title": "Create a contribution guide with coding standards",
    "url": "https://github.com/Auriora/OneMount/issues/36"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement more comprehensive logging to aid in troubleshooting.\n\n## Rationale\nMore detailed logs would aid in troubleshooting.\n\n## Impact\nMedium - Would improve supportability.\n\n## Relevant Documentation\n- **Requirements**: FR-DEV-001, FR-DEV-002, FR-DEV-003, NFR-MNT-003\n- **Architecture**: SAS 5.1 (Key Architectural Decisions - Structured logging with zerolog)\n- **Design**: SDS 6.4 (Error Handling - Structured Logging)\n- **Implementation**: Various files across the codebase\n\n## Implementation Notes\n- Implement consistent logging patterns across the codebase\n- Add contextual information to log entries\n- Implement log levels for different verbosity needs\n- Add correlation IDs for tracking operations\n- Ensure logs are machine-parseable",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTrg",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPNLw",
        "name": "logging",
        "description": "Logging improvements",
        "color": "0075ca"
      }
    ],
    "number": 35,
    "state": "OPEN",
    "title": "Implement more comprehensive logging",
    "url": "https://github.com/Auriora/OneMount/issues/35"
  },
  {
    "assignees": [],
    "body": "## Description\nDocument common debugging procedures to help developers troubleshoot issues more efficiently.\n\n## Rationale\nWould help developers troubleshoot issues more efficiently.\n\n## Impact\nMedium - Would reduce time spent on debugging.\n\n## Relevant Documentation\n- **Requirements**: FR-DEV-001, FR-DEV-002, FR-DEV-003\n- **Architecture**: SAS 3.3.3 (Development Environment)\n- **Design**: SDS 6.4 (Error Handling)\n- **Implementation**: Various files across the codebase\n\n## Implementation Notes\n- Document common error scenarios and their solutions\n- Create troubleshooting guides for different components\n- Add logging best practices\n- Document debugging tools and techniques\n- Include examples of debugging complex issues",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTqP",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 34,
    "state": "OPEN",
    "title": "Document common debugging procedures",
    "url": "https://github.com/Auriora/OneMount/issues/34"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a developer guide for extending the system to facilitate contributions from new developers.\n\n## Rationale\nWould facilitate contributions from new developers.\n\n## Impact\nMedium - Would encourage community contributions.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-001, NFR-MNT-004\n- **Architecture**: SAS 3.3 (Development View)\n- **Design**: SDS 6.1 (Dependencies)\n- **Implementation**: docs/3-Implementation/design_to_code_mapping.md\n\n## Implementation Notes\n- Create a comprehensive developer guide\n- Document extension points in the system\n- Provide examples of common extension scenarios\n- Include setup instructions for development environment\n- Add contribution guidelines",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTpG",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 33,
    "state": "OPEN",
    "title": "Create a developer guide for extending the system",
    "url": "https://github.com/Auriora/OneMount/issues/33"
  },
  {
    "assignees": [],
    "body": "## Description\nImprove code documentation with more examples to help new developers understand the codebase.\n\n## Rationale\nCurrent documentation could be enhanced with usage examples.\n\n## Impact\nMedium - Would help new developers understand the codebase.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-004\n- **Architecture**: SAS 3.3.3 (Development Environment - Documentation)\n- **Design**: SDS 7.1 (References)\n- **Implementation**: Various files across the codebase\n\n## Implementation Notes\n- Identify key components that need better documentation\n- Add usage examples for public APIs\n- Create code snippets demonstrating common patterns\n- Document gotchas and edge cases\n- Ensure documentation follows Go's standards",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTnn",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPM4A",
        "name": "developer-experience",
        "description": "Developer experience improvements",
        "color": "0075ca"
      }
    ],
    "number": 32,
    "state": "OPEN",
    "title": "Improve code documentation with more examples",
    "url": "https://github.com/Auriora/OneMount/issues/32"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a comprehensive test plan for offline functionality to ensure reliability in offline scenarios.\n\n## Rationale\nOffline mode is complex and requires thorough testing.\n\n## Impact\nHigh - Would ensure reliability in offline scenarios.\n\n## Relevant Documentation\n- **Requirements**: FR-OFF-001, FR-OFF-002, FR-OFF-003, FR-OFF-004\n- **Architecture**: SAS 3.2.1 (Logical Components - Cache Management), SAS 4.3 (Other Crosscutting Concerns - Availability)\n- **Design**: SDS 3.1 (Sequence Diagram - File Access Offline Mode)\n- **Implementation**: fs/offline.go, fs/offline_test.go\n\n## Implementation Notes\n- Define test scenarios for offline operations\n- Implement network disconnection simulation\n- Test synchronization after reconnection\n- Test conflict resolution during reconnection\n- Create automated tests for offline functionality",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTmP",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMzQ",
        "name": "offline",
        "description": "Offline functionality",
        "color": "c2e0c6"
      }
    ],
    "number": 31,
    "state": "OPEN",
    "title": "Create a comprehensive test plan for offline functionality",
    "url": "https://github.com/Auriora/OneMount/issues/31"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement automated UI testing to ensure GUI reliability.\n\n## Rationale\nGUI functionality should be tested automatically.\n\n## Impact\nMedium - Would ensure GUI reliability.\n\n## Relevant Documentation\n- **Requirements**: FR-UI-001, FR-UI-002, FR-UI-003, FR-UI-004\n- **Architecture**: SAS 3.2.1 (Logical Components - User Interface)\n- **Design**: SDS 2.2 (Component Diagram - User Interface package)\n- **Implementation**: ui/onedriver.go, ui/widgets.go\n\n## Implementation Notes\n- Research UI testing frameworks for GTK applications\n- Implement tests for key UI workflows\n- Add screenshot comparison tests\n- Test with different themes and display configurations\n- Integrate with CI pipeline",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTkp",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 30,
    "state": "OPEN",
    "title": "Implement automated UI testing",
    "url": "https://github.com/Auriora/OneMount/issues/30"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd performance benchmarks for key operations to help identify performance regressions.\n\n## Rationale\nWould help identify performance regressions.\n\n## Impact\nMedium - Would maintain performance standards over time.\n\n## Relevant Documentation\n- **Requirements**: NFR-PERF-001, NFR-PERF-002, NFR-PERF-003, NFR-PERF-004\n- **Architecture**: SAS 4.2 (Performance)\n- **Design**: SDS 6.2 (Performance Considerations)\n- **Implementation**: Various files across the codebase\n\n## Implementation Notes\n- Identify key operations to benchmark\n- Implement benchmark tests using Go's testing framework\n- Create baseline performance metrics\n- Add CI integration for performance testing\n- Implement performance regression detection",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTjS",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      }
    ],
    "number": 29,
    "state": "OPEN",
    "title": "Add performance benchmarks for key operations",
    "url": "https://github.com/Auriora/OneMount/issues/29"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement integration tests for authentication flows to ensure authentication reliability.\n\n## Rationale\nAuthentication is critical and should be thoroughly tested.\n\n## Impact\nMedium - Would ensure authentication reliability.\n\n## Relevant Documentation\n- **Requirements**: FR-AUTH-001, FR-AUTH-003, FR-AUTH-004\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API), SAS 4.1.2 (Authentication and Authorization)\n- **Design**: SDS 3.1 (Sequence Diagram - Authentication Workflow)\n- **Implementation**: fs/graph/oauth2.go, fs/graph/oauth2_test.go\n\n## Implementation Notes\n- Create mock OAuth server for testing\n- Test all authentication flows (interactive, headless)\n- Test token refresh scenarios\n- Test error handling and recovery\n- Test with various authentication challenges",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTh8",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLaA",
        "name": "authentication",
        "description": "Authentication-related changes",
        "color": "d93f0b"
      }
    ],
    "number": 28,
    "state": "OPEN",
    "title": "Implement integration tests for authentication flows",
    "url": "https://github.com/Auriora/OneMount/issues/28"
  },
  {
    "assignees": [],
    "body": "## Description\nIncrease unit test coverage for edge cases to improve system reliability.\n\n## Rationale\nSome edge cases may not be adequately tested.\n\n## Impact\nHigh - Would improve system reliability.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-002\n- **Architecture**: SAS 3.3.3 (Development Environment - Testing)\n- **Design**: SDS 6.4 (Error Handling)\n- **Implementation**: fs/fs_test.go, fs/graph/graph_test.go\n\n## Implementation Notes\n- Identify areas with low test coverage\n- Focus on error handling and edge cases\n- Add tests for concurrent operations\n- Add tests for resource constraints (low memory, disk space)\n- Implement property-based testing for complex operations",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTg7",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 27,
    "state": "OPEN",
    "title": "Increase unit test coverage for edge cases",
    "url": "https://github.com/Auriora/OneMount/issues/27"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for dark mode in the GUI to improve usability in low-light environments.\n\n## Rationale\nWould improve usability in low-light environments.\n\n## Impact\nLow - Would align with modern UI expectations.\n\n## Relevant Documentation\n- **Requirements**: FR-UI-002\n- **Architecture**: SAS 3.1.2 (External Entities - Desktop Environment)\n- **Design**: SDS 2.2 (Component Diagram - User Interface package)\n- **Implementation**: ui/onedriver.go, ui/widgets.go\n\n## Implementation Notes\n- Implement theme detection from system settings\n- Create dark mode color scheme\n- Add manual theme selection option\n- Ensure all UI elements support both themes\n- Test with various desktop environments",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTfW",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 26,
    "state": "OPEN",
    "title": "Add support for dark mode in the GUI",
    "url": "https://github.com/Auriora/OneMount/issues/26"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement customizable notification settings to allow users to control notification behavior.\n\n## Rationale\nUsers should be able to control notification behavior.\n\n## Impact\nLow - Would improve user experience for notification preferences.\n\n## Relevant Documentation\n- **Requirements**: FR-UI-003, FR-UI-004\n- **Architecture**: SAS 3.2.1 (Logical Components - User Interface)\n- **Design**: SDS 2.2 (Component Diagram - User Interface package)\n- **Implementation**: ui/onedriver.go\n\n## Implementation Notes\n- Add notification settings to the preferences dialog\n- Implement configurable notification types (success, error, info)\n- Add options for notification duration and position\n- Implement do-not-disturb mode\n- Store notification preferences persistently",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTeX",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMqA",
        "name": "notifications",
        "description": "Notification-related features",
        "color": "c2e0c6"
      }
    ],
    "number": 25,
    "state": "OPEN",
    "title": "Implement customizable notification settings",
    "url": "https://github.com/Auriora/OneMount/issues/25"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd more detailed progress indicators for file operations to improve user experience for long-running operations.\n\n## Rationale\nUsers should have better visibility into operation progress.\n\n## Impact\nMedium - Would improve user experience for long-running operations.\n\n## Relevant Documentation\n- **Requirements**: FR-UI-003\n- **Architecture**: SAS 3.2.1 (Logical Components - User Interface)\n- **Design**: SDS 2.1 (Class Diagram - FileStatus enum)\n- **Implementation**: ui/onedriver.go, fs/file_status.go\n\n## Implementation Notes\n- Implement detailed progress tracking for uploads and downloads\n- Add progress bars in the UI\n- Implement estimated time remaining calculations\n- Add cancel buttons for in-progress operations\n- Ensure progress updates are efficient and don't impact performance",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTdB",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 24,
    "state": "OPEN",
    "title": "Add more detailed progress indicators for file operations",
    "url": "https://github.com/Auriora/OneMount/issues/24"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement a more user-friendly authentication flow to improve first-time user experience.\n\n## Rationale\nCurrent authentication process could be streamlined.\n\n## Impact\nMedium - Would improve first-time user experience.\n\n## Relevant Documentation\n- **Requirements**: FR-AUTH-001, FR-AUTH-004, FR-UI-002\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API), SAS 3.2.1 (Logical Components - User Interface)\n- **Design**: SDS 3.1 (Sequence Diagram - Authentication Workflow)\n- **Implementation**: fs/graph/oauth2.go, ui/onedriver.go\n\n## Implementation Notes\n- Simplify the authentication flow\n- Add better error handling and recovery\n- Improve user guidance during authentication\n- Add visual feedback during the process\n- Test with various authentication scenarios",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTbX",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLaA",
        "name": "authentication",
        "description": "Authentication-related changes",
        "color": "d93f0b"
      }
    ],
    "number": 23,
    "state": "OPEN",
    "title": "Implement a more user-friendly authentication flow",
    "url": "https://github.com/Auriora/OneMount/issues/23"
  },
  {
    "assignees": [],
    "body": "## Description\nEnhance the GUI with more detailed status information to help users understand system state better.\n\n## Rationale\nCurrent status display could provide more information.\n\n## Impact\nMedium - Would help users understand system state better.\n\n## Relevant Documentation\n- **Requirements**: FR-UI-003, FR-UI-004\n- **Architecture**: SAS 3.2.1 (Logical Components - User Interface)\n- **Design**: SDS 2.1 (Class Diagram - FileStatus enum and FileStatusInfo class)\n- **Implementation**: ui/onedriver.go, ui/widgets.go\n\n## Implementation Notes\n- Add more detailed file status indicators\n- Implement a status dashboard with system statistics\n- Add transfer progress indicators\n- Improve error message display\n- Add tooltips for status icons",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTZi",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMUQ",
        "name": "ui",
        "description": "UI improvements",
        "color": "fbca04"
      }
    ],
    "number": 22,
    "state": "OPEN",
    "title": "Enhance the GUI with more detailed status information",
    "url": "https://github.com/Auriora/OneMount/issues/22"
  },
  {
    "assignees": [],
    "body": "## Description\nConduct a security audit and implement findings to identify and address potential security vulnerabilities.\n\n## Rationale\nWould identify and address potential security vulnerabilities.\n\n## Impact\nHigh - Would ensure the system is secure against common threats.\n\n## Relevant Documentation\n- **Requirements**: NFR-SEC-001, NFR-SEC-002, NFR-SEC-003\n- **Architecture**: SAS 4.1 (Security), SAS 4.1.4 (Security Patterns)\n- **Design**: SDS 6.3 (Security Considerations)\n- **Implementation**: Various files across the codebase\n\n## Implementation Notes\n- Engage security experts or use automated tools for the audit\n- Prioritize findings based on risk and impact\n- Create issues for each security finding\n- Implement fixes for high-priority issues first\n- Document security best practices for the project",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTYV",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLWg",
        "name": "security",
        "description": "Security enhancements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPMDg",
        "name": "audit",
        "description": "Audit-related features",
        "color": "d93f0b"
      }
    ],
    "number": 21,
    "state": "OPEN",
    "title": "Conduct a security audit and implement findings",
    "url": "https://github.com/Auriora/OneMount/issues/21"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for multi-factor authentication to improve security for authentication.\n\n## Rationale\nWould improve security for authentication.\n\n## Impact\nMedium - Would align with modern security best practices.\n\n## Relevant Documentation\n- **Requirements**: FR-AUTH-001, FR-AUTH-004\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API), SAS 4.1.2 (Authentication and Authorization)\n- **Design**: SDS 3.1 (Sequence Diagram - Authentication Workflow), SDS 4.3 (Authentication and Authorization)\n- **Implementation**: fs/graph/oauth2.go\n\n## Implementation Notes\n- Research Microsoft's MFA implementation for OAuth\n- Enhance authentication flow to support MFA challenges\n- Add proper error handling for MFA-related errors\n- Test with various MFA methods (app, SMS, phone)\n- Update documentation to explain MFA support",
    "closed": true,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTSY",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLWg",
        "name": "security",
        "description": "Security enhancements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLaA",
        "name": "authentication",
        "description": "Authentication-related changes",
        "color": "d93f0b"
      }
    ],
    "number": 20,
    "state": "CLOSED",
    "title": "Add support for multi-factor authentication",
    "url": "https://github.com/Auriora/OneMount/issues/20"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement file encryption for cached content to protect sensitive data stored in the local cache.\n\n## Rationale\nWould protect sensitive data stored in the local cache.\n\n## Impact\nMedium - Would enhance security for sensitive files.\n\n## Relevant Documentation\n- **Requirements**: NFR-SEC-001, NFR-SEC-003\n- **Architecture**: SAS 4.1.3 (Data Protection - Local file permissions for cached content)\n- **Design**: SDS 6.3 (Security Considerations)\n- **Implementation**: fs/content_cache.go, fs/cache.go\n\n## Implementation Notes\n- Research encryption options suitable for file caching\n- Implement transparent encryption/decryption for cached files\n- Ensure encryption keys are securely stored\n- Add performance benchmarks to measure impact\n- Consider making encryption optional and configurable",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTRI",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLWg",
        "name": "security",
        "description": "Security enhancements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPL0g",
        "name": "privacy",
        "description": "Privacy enhancements",
        "color": "d93f0b"
      }
    ],
    "number": 19,
    "state": "OPEN",
    "title": "Implement file encryption for cached content",
    "url": "https://github.com/Auriora/OneMount/issues/19"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd support for Microsoft's Conditional Access policies to improve compatibility with enterprise security requirements.\n\n## Rationale\nWould improve compatibility with enterprise security requirements.\n\n## Impact\nMedium - Would make the system more usable in enterprise environments.\n\n## Relevant Documentation\n- **Requirements**: FR-AUTH-001, FR-AUTH-004\n- **Architecture**: SAS 3.1.2 (External Entities - Microsoft OneDrive / Graph API), SAS 4.1.2 (Authentication and Authorization)\n- **Design**: SDS 4.3 (Authentication and Authorization)\n- **Implementation**: fs/graph/oauth2.go\n\n## Implementation Notes\n- Research Microsoft's Conditional Access requirements\n- Implement support for additional authentication challenges\n- Add handling for policy-based access restrictions\n- Test with various Conditional Access policies\n- Document enterprise deployment considerations",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTPd",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLWg",
        "name": "security",
        "description": "Security enhancements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLmQ",
        "name": "enterprise",
        "description": "Enterprise features",
        "color": "c2e0c6"
      }
    ],
    "number": 18,
    "state": "OPEN",
    "title": "Add support for Microsoft's Conditional Access policies",
    "url": "https://github.com/Auriora/OneMount/issues/18"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement more secure token storage mechanisms to reduce the risk of unauthorized access.\n\n## Rationale\nCurrent token storage could be enhanced for better security.\n\n## Impact\nHigh - Would reduce risk of unauthorized access.\n\n## Relevant Documentation\n- **Requirements**: FR-AUTH-002, NFR-SEC-001, NFR-SEC-003\n- **Architecture**: SAS 3.5.1 (Deployment Diagram - auth_tokens.json), SAS 4.1.1 (Security Requirements), SAS 4.1.3 (Data Protection)\n- **Design**: SDS 4.3 (Authentication and Authorization - Secure storage of refresh tokens), SDS 6.3 (Security Considerations - Token Storage)\n- **Implementation**: fs/graph/oauth2.go\n\n## Implementation Notes\n- Research secure token storage options for Linux\n- Consider using system keyring or credential manager\n- Implement encryption for stored tokens\n- Add proper file permissions and ownership\n- Consider token rotation strategies",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTN2",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLWg",
        "name": "security",
        "description": "Security enhancements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLaA",
        "name": "authentication",
        "description": "Authentication-related changes",
        "color": "d93f0b"
      }
    ],
    "number": 17,
    "state": "OPEN",
    "title": "Implement more secure token storage mechanisms",
    "url": "https://github.com/Auriora/OneMount/issues/17"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement automated crash recovery mechanisms to recover gracefully from crashes without data loss.\n\n## Rationale\nSystem should recover gracefully from crashes without data loss.\n\n## Impact\nMedium - Would improve overall system reliability.\n\n## Relevant Documentation\n- **Requirements**: NFR-REL-002, NFR-REL-003\n- **Architecture**: SAS 4.3 (Other Crosscutting Concerns - Availability - Crash recovery mechanisms)\n- **Design**: SDS 6.4 (Error Handling - Graceful Degradation)\n- **Implementation**: fs/cache.go, fs/upload_manager.go\n\n## Implementation Notes\n- Implement transaction logging for critical operations\n- Add crash detection on startup\n- Implement recovery procedures for incomplete operations\n- Add integrity checking for the cache database\n- Implement automatic repair of corrupted state",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTMQ",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKuA",
        "name": "stability",
        "description": "Stability improvements",
        "color": "e99695"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 16,
    "state": "OPEN",
    "title": "Implement automated crash recovery mechanisms",
    "url": "https://github.com/Auriora/OneMount/issues/16"
  },
  {
    "assignees": [],
    "body": "## Description\nAdd comprehensive error recovery for interrupted uploads/downloads to resume transfers gracefully.\n\n## Rationale\nInterrupted transfers should resume gracefully.\n\n## Impact\nMedium - Would improve reliability for large file transfers.\n\n## Relevant Documentation\n- **Requirements**: NFR-REL-001, NFR-PERF-004\n- **Architecture**: SAS 3.2.3 (Key Abstractions - UploadManager/DownloadManager), SAS 4.3 (Other Crosscutting Concerns - Reliability)\n- **Design**: SDS 6.4 (Error Handling - Retry Logic)\n- **Implementation**: fs/upload_session.go, fs/download_manager.go\n\n## Implementation Notes\n- Implement checkpointing for upload and download progress\n- Add ability to resume from the last successful chunk\n- Store transfer state persistently to survive application restarts\n- Add user notifications for interrupted transfers\n- Implement automatic retry of interrupted transfers",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTLO",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 15,
    "state": "OPEN",
    "title": "Add comprehensive error recovery for interrupted uploads/downloads",
    "url": "https://github.com/Auriora/OneMount/issues/15"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement better handling of API rate limiting to prevent service disruption due to rate limiting.\n\n## Rationale\nCurrent approach may not optimally handle Microsoft's rate limits.\n\n## Impact\nMedium - Would prevent service disruption due to rate limiting.\n\n## Relevant Documentation\n- **Requirements**: NFR-REL-004\n- **Architecture**: SAS 4.3 (Other Crosscutting Concerns - Reliability - Graceful handling of API rate limits)\n- **Design**: SDS 4.4 (Rate Limiting and Quotas), SDS 6.4 (Error Handling - Retry Logic with exponential backoff)\n- **Implementation**: fs/graph/graph.go\n\n## Implementation Notes\n- Implement rate limiting detection from API responses\n- Add adaptive throttling based on rate limit headers\n- Implement request queuing and prioritization\n- Add monitoring and alerting for rate limit issues\n- Test with simulated rate limiting scenarios",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTKN",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJtg",
        "name": "api",
        "description": "API-related changes",
        "color": "1d76db"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 14,
    "state": "OPEN",
    "title": "Implement better handling of API rate limiting",
    "url": "https://github.com/Auriora/OneMount/issues/14"
  },
  {
    "assignees": [],
    "body": "## Description\nEnhance retry logic for network operations to improve reliability in poor network conditions.\n\n## Rationale\nMore sophisticated retry strategies could improve reliability in poor network conditions.\n\n## Impact\nHigh - Would make the system more robust in real-world scenarios.\n\n## Relevant Documentation\n- **Requirements**: NFR-REL-001, NFR-REL-004\n- **Architecture**: SAS 3.2.3 (Key Abstractions - UploadManager/DownloadManager), SAS 4.3 (Other Crosscutting Concerns - Reliability)\n- **Design**: SDS 6.4 (Error Handling - Retry Logic)\n- **Implementation**: fs/graph/graph.go, fs/upload_manager.go, fs/download_manager.go\n\n## Implementation Notes\n- Implement exponential backoff with jitter for retries\n- Add configurable retry limits and timeouts\n- Improve error categorization to determine which errors are retryable\n- Add circuit breaker pattern for persistent failures\n- Implement detailed logging of retry attempts",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTIu",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKgA",
        "name": "networking",
        "description": "Networking-related changes",
        "color": "1d76db"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      }
    ],
    "number": 13,
    "state": "OPEN",
    "title": "Enhance retry logic for network operations",
    "url": "https://github.com/Auriora/OneMount/issues/13"
  },
  {
    "assignees": [],
    "body": "## Description\nImprove conflict resolution mechanisms to make handling of file conflicts more user-friendly.\n\n## Rationale\nCurrent handling of file conflicts could be more user-friendly.\n\n## Impact\nHigh - Would prevent data loss and improve user experience.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-006, NFR-REL-003\n- **Architecture**: SAS 4.3 (Other Crosscutting Concerns - Reliability - Conflict resolution for concurrent changes)\n- **Design**: SDS 2.1 (Class Diagram - FileStatus enum with StatusConflict), SDS 5.4 (Data Validation Rules)\n- **Implementation**: fs/upload_session.go, fs/file_status.go\n\n## Implementation Notes\n- Analyze current conflict resolution approach\n- Implement a more user-friendly conflict resolution UI\n- Add options for keeping both versions, overwriting, or merging\n- Improve conflict detection to reduce false positives\n- Add detailed logging of conflict resolution actions",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTHe",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLHA",
        "name": "reliability",
        "description": "Reliability improvements",
        "color": "0e8a16"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPLMg",
        "name": "user-experience",
        "description": "User experience improvements",
        "color": "fbca04"
      }
    ],
    "number": 12,
    "state": "OPEN",
    "title": "Improve conflict resolution mechanisms",
    "url": "https://github.com/Auriora/OneMount/issues/12"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement more efficient handling of thumbnail generation to improve performance when browsing media files.\n\n## Rationale\nThumbnail generation can be resource-intensive.\n\n## Impact\nLow - Would improve performance when browsing media files.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-005, NFR-PERF-001\n- **Architecture**: SAS 3.2.1 (Logical Components - Cache Management)\n- **Design**: SDS 2.1 (Class Diagram - ThumbnailCache class)\n- **Implementation**: fs/thumbnail_cache.go\n\n## Implementation Notes\n- Analyze current thumbnail generation process\n- Implement lazy loading of thumbnails\n- Consider using a dedicated worker pool for thumbnail generation\n- Add caching of frequently accessed thumbnails\n- Optimize thumbnail size and quality for different use cases",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTGI",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPK6g",
        "name": "media",
        "description": "Media-related features",
        "color": "c2e0c6"
      }
    ],
    "number": 11,
    "state": "OPEN",
    "title": "Implement more efficient handling of thumbnail generation",
    "url": "https://github.com/Auriora/OneMount/issues/11"
  },
  {
    "assignees": [],
    "body": "## Description\nOptimize memory usage during large file transfers to improve stability and performance.\n\n## Rationale\nLarge file operations may consume excessive memory.\n\n## Impact\nMedium - Would improve stability during large file operations.\n\n## Relevant Documentation\n- **Requirements**: NFR-PERF-004, NFR-REL-001\n- **Architecture**: SAS 3.2.3 (Key Abstractions - UploadManager/DownloadManager), SAS 4.2.2 (Scalability)\n- **Design**: SDS 3.1 (Sequence Diagram - File Access Large File), SDS 6.2 (Performance Considerations - Chunked Transfers)\n- **Implementation**: fs/upload_session.go, fs/download_manager.go\n\n## Implementation Notes\n- Analyze current memory usage patterns during large file transfers\n- Implement streaming for large file uploads and downloads\n- Use fixed-size buffers for file transfers\n- Add memory usage monitoring and adaptive throttling\n- Test with very large files (>10GB)",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTEv",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKuA",
        "name": "stability",
        "description": "Stability improvements",
        "color": "e99695"
      }
    ],
    "number": 10,
    "state": "OPEN",
    "title": "Optimize memory usage during large file transfers",
    "url": "https://github.com/Auriora/OneMount/issues/10"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement background prefetching for directories to improve perceived performance when browsing directories.\n\n## Rationale\nCould improve perceived performance when browsing directories.\n\n## Impact\nMedium - Would make directory navigation feel more responsive.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-004, FR-FS-005, NFR-PERF-001\n- **Architecture**: SAS 3.2.1 (Logical Components - Filesystem Implementation), SAS 4.2.1 (Performance Requirements)\n- **Design**: SDS 2.1 (Class Diagram - DownloadManager class), SDS 6.2 (Performance Considerations)\n- **Implementation**: fs/download_manager.go, fs/directory_operations.go\n\n## Implementation Notes\n- Implement a background worker for directory prefetching\n- Add heuristics to predict which directories might be accessed next\n- Ensure prefetching doesn't interfere with foreground operations\n- Add configuration options to control prefetching behavior\n- Measure impact on directory browsing performance",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTDW",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      }
    ],
    "number": 9,
    "state": "OPEN",
    "title": "Implement background prefetching for directories",
    "url": "https://github.com/Auriora/OneMount/issues/9"
  },
  {
    "assignees": [],
    "body": "## Description\nOptimize the delta synchronization algorithm to reduce bandwidth usage by transferring only the necessary changes.\n\n## Rationale\nCurrent implementation may transfer more data than necessary.\n\n## Impact\nMedium - Would reduce network usage and improve sync speed.\n\n## Relevant Documentation\n- **Requirements**: NFR-PERF-001, NFR-PERF-003\n- **Architecture**: SAS 3.2.1 (Logical Components - Cache Management), SAS 4.2.3 (Caching Strategy)\n- **Design**: SDS 3.2 (Collaboration Diagram), SDS 6.2 (Performance Considerations)\n- **Implementation**: fs/delta.go\n\n## Implementation Notes\n- Analyze current delta synchronization algorithm\n- Implement more efficient change detection\n- Consider using checksums to identify changed file parts\n- Add metrics to track bandwidth usage\n- Test with various file sizes and change patterns",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTCN",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKgA",
        "name": "networking",
        "description": "Networking-related changes",
        "color": "1d76db"
      }
    ],
    "number": 8,
    "state": "OPEN",
    "title": "Optimize delta synchronization algorithm to reduce bandwidth usage",
    "url": "https://github.com/Auriora/OneMount/issues/8"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement more aggressive metadata caching strategies to reduce API calls and improve responsiveness.\n\n## Rationale\nCould reduce API calls and improve responsiveness.\n\n## Impact\nHigh - Would significantly improve user experience for frequently accessed files.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-005, NFR-PERF-001, NFR-PERF-003\n- **Architecture**: SAS 3.2.1 (Logical Components - Cache Management), SAS 4.2.3 (Caching Strategy)\n- **Design**: SDS 2.1 (Class Diagram - LoopbackCache and ThumbnailCache classes), SDS 6.2 (Performance Considerations - Caching)\n- **Implementation**: fs/cache.go, fs/content_cache.go\n\n## Implementation Notes\n- Analyze current caching strategy and identify bottlenecks\n- Implement predictive caching for frequently accessed directories\n- Consider using a more sophisticated cache eviction policy\n- Add configurable cache size limits\n- Benchmark performance improvements",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XTAx",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKXw",
        "name": "performance",
        "description": "Performance improvements",
        "color": "d93f0b"
      }
    ],
    "number": 7,
    "state": "OPEN",
    "title": "Implement more aggressive metadata caching strategies",
    "url": "https://github.com/Auriora/OneMount/issues/7"
  },
  {
    "assignees": [],
    "body": "## Description\nDocument architectural decision records (ADRs) for major design decisions to preserve context for why certain design choices were made.\n\n## Rationale\nPreserves context for why certain design choices were made.\n\n## Impact\nMedium - Helps new developers understand the system better.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-001, NFR-MNT-004\n- **Architecture**: SAS 5.1 (Key Architectural Decisions)\n- **Design**: SDS 7.1 (References)\n- **Implementation**: N/A\n\n## Implementation Notes\n- Research ADR formats and templates\n- Identify key architectural decisions already made\n- Document each decision in a separate ADR file\n- Include context, decision, consequences, and alternatives considered\n- Store ADRs in the docs/architecture directory",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XS_Y",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTvQ",
        "name": "documentation",
        "description": "Improvements or additions to documentation",
        "color": "0075ca"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJVg",
        "name": "architecture",
        "description": "Related to system architecture",
        "color": "fbca04"
      }
    ],
    "number": 6,
    "state": "OPEN",
    "title": "Document architectural decision records (ADRs) for major design decisions",
    "url": "https://github.com/Auriora/OneMount/issues/6"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement a dependency injection pattern for core components to make testing easier and reduce tight coupling between components.\n\n## Rationale\nWould make testing easier and reduce tight coupling between components.\n\n## Impact\nMedium - Improves testability and maintainability.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-001, NFR-MNT-002\n- **Architecture**: SAS 3.2.1 (Logical Components), SAS 3.3.3 (Development Environment)\n- **Design**: SDS 2.1 (Class Diagram), SDS 2.2 (Component Diagram)\n- **Implementation**: Various files across the codebase\n\n## Implementation Notes\n- Identify key components that would benefit from dependency injection\n- Define interfaces for these components\n- Update constructors to accept dependencies\n- Create mock implementations for testing\n- Update existing tests to use the new pattern",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XS98",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJfA",
        "name": "refactoring",
        "description": "Code refactoring",
        "color": "d4c5f9"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKKg",
        "name": "testing",
        "description": "Testing improvements",
        "color": "0e8a16"
      }
    ],
    "number": 5,
    "state": "OPEN",
    "title": "Implement a dependency injection pattern for core components",
    "url": "https://github.com/Auriora/OneMount/issues/5"
  },
  {
    "assignees": [],
    "body": "## Description\nCreate a formal API versioning strategy for the D-Bus interface to ensure backward compatibility as the interface evolves.\n\n## Rationale\nEnsures backward compatibility as the interface evolves.\n\n## Impact\nMedium - Prevents breaking changes for external applications.\n\n## Relevant Documentation\n- **Requirements**: FR-INT-001, FR-INT-002, FR-INT-003\n- **Architecture**: SAS 3.1.3 (System Interfaces - D-Bus Interface), SAS 3.4.2 (Process Communication - D-Bus)\n- **Design**: SDS 2.1 (Class Diagram - Filesystem with dbusServer attribute)\n- **Implementation**: fs/dbus.go\n\n## Implementation Notes\n- Research D-Bus versioning best practices\n- Define a versioning scheme (e.g., semantic versioning)\n- Document the versioning strategy\n- Implement version checking in the D-Bus interface\n- Add tests for version compatibility",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XS8q",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJtg",
        "name": "api",
        "description": "API-related changes",
        "color": "1d76db"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPKBg",
        "name": "compatibility",
        "description": "Compatibility improvements",
        "color": "c2e0c6"
      }
    ],
    "number": 4,
    "state": "OPEN",
    "title": "Create a formal API versioning strategy for the D-Bus interface",
    "url": "https://github.com/Auriora/OneMount/issues/4"
  },
  {
    "assignees": [],
    "body": "## Description\nRefactor the Filesystem struct to reduce its complexity by breaking it down into smaller, more focused components.\n\n## Rationale\nThe current Filesystem struct has many responsibilities and is quite large.\n\n## Impact\nMedium - Would improve code maintainability and make testing easier.\n\n## Relevant Documentation\n- **Requirements**: NFR-MNT-001, NFR-MNT-002\n- **Architecture**: SAS 3.2.1 (Logical Components - Filesystem Implementation), SAS 3.2.3 (Key Abstractions - Filesystem)\n- **Design**: SDS 2.1 (Class Diagram - Filesystem class)\n- **Implementation**: fs/fs.go, fs/cache.go\n\n## Implementation Notes\n- Identify distinct responsibilities in the Filesystem struct\n- Create smaller, focused structs for each responsibility\n- Use composition to maintain the current API\n- Update tests to reflect the new structure",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XS7G",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJVg",
        "name": "architecture",
        "description": "Related to system architecture",
        "color": "fbca04"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJfA",
        "name": "refactoring",
        "description": "Code refactoring",
        "color": "d4c5f9"
      }
    ],
    "number": 3,
    "state": "OPEN",
    "title": "Refactor the Filesystem struct to reduce its complexity",
    "url": "https://github.com/Auriora/OneMount/issues/3"
  },
  {
    "assignees": [],
    "body": "## Description\nImplement a more modular plugin architecture for file system operations to allow for easier extension of functionality and better separation of concerns.\n\n## Rationale\nWould allow for easier extension of functionality and better separation of concerns.\n\n## Impact\nHigh - Would make the codebase more maintainable and extensible.\n\n## Relevant Documentation\n- **Requirements**: FR-FS-001, FR-FS-002, FR-FS-003, NFR-MNT-001\n- **Architecture**: SAS 3.2.1 (Logical Components - Filesystem Implementation), SAS 5.1 (Key Architectural Decisions - Use of FUSE)\n- **Design**: SDS 2.1 (Class Diagram - Filesystem class), SDS 2.2 (Component Diagram - Filesystem package)\n- **Implementation**: fs/fs.go, fs/inode.go, fs/file_operations.go\n\n## Implementation Notes\n- Consider using interfaces for key filesystem operations\n- Look at the existing Filesystem struct and identify components that can be extracted\n- Ensure backward compatibility with existing code\n- Add unit tests for new interfaces",
    "closed": false,
    "comments": [],
    "id": "I_kwDOOgHwEc60XS5n",
    "labels": [
      {
        "id": "LA_kwDOOgHwEc8AAAAB-8dTxw",
        "name": "enhancement",
        "description": "New feature or request",
        "color": "a2eeef"
      },
      {
        "id": "LA_kwDOOgHwEc8AAAAB_HPJVg",
        "name": "architecture",
        "description": "Related to system architecture",
        "color": "fbca04"
      }
    ],
    "number": 2,
    "state": "OPEN",
    "title": "Implement a more modular plugin architecture for file system operations",
    "url": "https://github.com/Auriora/OneMount/issues/2"
  }
]
