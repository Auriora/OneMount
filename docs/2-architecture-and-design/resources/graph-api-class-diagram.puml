@startuml Microsoft Graph API Integration

' Class definitions
class AuthConfig {
  +ClientID: string
  +CodeURL: string
  +TokenURL: string
  +RedirectURL: string
  +applyDefaults(): error
}

class Auth {
  +AuthConfig: AuthConfig
  +Account: string
  +ExpiresIn: int64
  +ExpiresAt: int64
  +AccessToken: string
  +RefreshToken: string
  -path: string
  +ToFile(file: string): error
  +FromFile(file: string): error
  +Refresh(ctx: context.Context): error
  -createRefreshTokenRequest(): *strings.Reader
  -handleRefreshResponse(resp: *http.Response, err: error): (bool, error)
  -updateTokenExpiration(oldTime: int64): void
  -handleFailedRefresh(ctx: context.Context, resp: *http.Response, body: []byte, reauth: bool): error
  +Request(resource, auth, method, content, headers): ([]byte, error)
  +RequestWithContext(ctx, resource, auth, method, content, headers): ([]byte, error)
  +Get(resource, auth, headers): ([]byte, error)
  +GetWithContext(ctx, resource, auth, headers): ([]byte, error)
  +Post(resource, auth, content, headers): ([]byte, error)
  +Put(resource, auth, content, headers): ([]byte, error)
  +Patch(resource, auth, content, headers): ([]byte, error)
  +Delete(resource, auth, headers): error
  {static} +getAuthURL(a: AuthConfig): string
  {static} +getAuthCodeHeadless(a: AuthConfig, accountName: string): (string, error)
  {static} +parseAuthCode(url: string): (string, error)
  {static} +getAuthTokens(ctx: context.Context, a: AuthConfig, authCode: string): (*Auth, error)
  {static} +newAuth(ctx: context.Context, config: AuthConfig, path: string, headless: bool): (*Auth, error)
  {static} +Authenticate(ctx: context.Context, config: AuthConfig, path: string, headless: bool): (*Auth, error)
}

class AuthError {
  +Error: string
  +ErrorDescription: string
  +ErrorCodes: []int
  +ErrorURI: string
  +Timestamp: string
  +TraceID: string
  +CorrelationID: string
}

class DriveItemParent {
  +Path: string
  +ID: string
  +DriveID: string
  +DriveType: string
}

class Folder {
  +ChildCount: uint32
}

class Hashes {
  +SHA1Hash: string
  +QuickXorHash: string
}

class File {
  +Hashes: Hashes
}

class Deleted {
  +State: string
}

class DriveItem {
  +ID: string
  +Name: string
  +Size: uint64
  +ModTime: *time.Time
  +Parent: *DriveItemParent
  +Folder: *Folder
  +File: *File
  +Deleted: *Deleted
  +ConflictBehavior: string
  +ETag: string
  +IsDir(): bool
  +ModTimeUnix(): uint64
  {static} +GetItem(id, auth): (*DriveItem, error)
  {static} +GetItemChild(id, name, auth): (*DriveItem, error)
  {static} +GetItemPath(path, auth): (*DriveItem, error)
  {static} +GetItemContent(id, auth): ([]byte, uint64, error)
  {static} +GetItemContentStream(id, auth, output): (uint64, error)
  {static} +Remove(id, auth): error
  {static} +Mkdir(name, parentID, auth): (*DriveItem, error)
  {static} +Rename(itemID, itemName, parentID, auth): error
  {static} +GetItemChildren(id, auth): ([]*DriveItem, error)
  {static} +GetItemChildrenPath(path, auth): ([]*DriveItem, error)
  {static} +IDPath(id: string): string
  {static} +ResourcePath(path: string): string
  {static} +childrenPath(path: string): string
  {static} +childrenPathID(id: string): string
}

class User {
  +UserPrincipalName: string
  {static} +GetUser(auth: *Auth): (User, error)
  {static} +GetUserWithContext(ctx: context.Context, auth: *Auth): (User, error)
}

class DriveQuota {
  +Deleted: uint64
  +FileCount: uint64
  +Remaining: uint64
  +State: string
  +Total: uint64
  +Used: uint64
}

class Drive {
  +ID: string
  +DriveType: string
  +Quota: DriveQuota
  {static} +GetDrive(auth: *Auth): (Drive, error)
  {static} +SetOperationalOffline(offline: bool): void
  {static} +GetOperationalOffline(): bool
  {static} +IsOffline(err: error): bool
}

class Header {
  +key: string
  +value: string
}

class ResponseCache {
  -cache: map[string]cacheEntry
  -ttl: time.Duration
  -mutex: sync.RWMutex
  {static} +NewResponseCache(ttl: time.Duration): *ResponseCache
  +Get(key: string): ([]byte, bool)
  +Set(key: string, data: []byte): void
  +Invalidate(key: string): void
  +InvalidatePrefix(prefix: string): void
}

class graphError {
  +Code: string
  +Message: string
}

' Relationships
DriveItem "1" --* "0..1" DriveItemParent : has parent
DriveItem "1" --* "0..1" Folder : is a
DriveItem "1" --* "0..1" File : is a
DriveItem "1" --* "0..1" Deleted : can be
File "1" --* "1" Hashes : has

Auth "1" --* "1" AuthConfig : has configuration

Drive "1" --* "1" DriveQuota : has quota

@enduml