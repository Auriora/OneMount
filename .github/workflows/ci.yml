name: Continuous Integration

on:
  # Run on pushes to main (but not tags)
  push:
    branches: [ main ]
    tags-ignore: [ '**' ]
    paths:
      - 'internal/**'

      - 'cmd/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/ci.yml'

  # Run on pull requests to main
  pull_request:
    branches: [ main ]
    paths:
      - 'internal/**'

      - 'cmd/**'
      - 'go.mod'
      - 'go.sum'
      - 'Makefile'
      - '.github/workflows/ci.yml'

  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Test and Build
    runs-on: [self-hosted, linux, onemount-testing, optimized]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libfuse3-dev \
          fuse3 \
          pkg-config \
          build-essential \
          fuse3 \
          libfuse3-dev \
          xvfb

    - name: Install CLI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements-dev-cli.txt
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download

    - name: Validate CLI tool
      run: |
        chmod +x scripts/dev
        ./scripts/dev info
        python3 scripts/test-dev-cli.py

    - name: Run tests
      run: |
        # Set CGO flags to suppress warnings
        export CGO_CFLAGS="-Wno-deprecated-declarations"
        # Fix for self-hosted runners: /tmp is mounted as tmpfs with noexec
        # Set GOTMPDIR to a writable location with exec permissions
        export GOTMPDIR="/workspace/tmp"
        mkdir -p "$GOTMPDIR"
        # Also set GOCACHE to avoid /tmp usage
        export GOCACHE="/workspace/.cache/go-build"
        mkdir -p "$GOCACHE"
        # Create test results directory
        mkdir -p test-results
        # Run tests with extended timeout and better error reporting
        go test -v -timeout 10m ./... -json > test-results/go-test-report.json || {
          echo "Tests failed. Checking for common issues..."
          echo "Go version: $(go version)"
          echo "Available packages:"
          go list ./...
          exit 1
        }

    - name: Generate JUnit XML from Go test results
      if: always()
      run: |
        # Install go-junit-report if not available
        go install github.com/jstemmer/go-junit-report/v2@latest
        # Convert JSON to JUnit XML
        cat test-results/go-test-report.json | go-junit-report -set-exit-code > test-results/junit.xml

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: test-results/
        retention-days: 30

    - name: Publish test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Go Tests
        path: test-results/junit.xml
        reporter: java-junit
    
    - name: Build binaries
      run: |
        # Set CGO flags to suppress warnings
        export CGO_CFLAGS="-Wno-deprecated-declarations"
        make build
        ls -la build/binaries/ || echo "No binaries found in build/binaries/"
        ls -la onemount* || echo "No binaries found in root"
    
    - name: Verify version
      run: |
        if [ -f build/binaries/onemount ]; then
          ./build/binaries/onemount --version
        elif [ -f onemount ]; then
          ./onemount --version
        else
          echo "onemount binary not found in expected locations"
          find . -name "onemount*" -type f 2>/dev/null || echo "No onemount binaries found anywhere"
        fi

  lint:
    name: Lint
    runs-on: [self-hosted, linux, onemount-testing, optimized]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v7
      with:
        version: v2.1.6
        args: --timeout=5m
