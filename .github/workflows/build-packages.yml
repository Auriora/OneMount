name: Build Ubuntu Packages

on:
  # Run on version tags (created by bumpversion)
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v0.1.0rc1, etc.

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      upload_packages:
        description: 'Upload packages as release assets'
        required: false
        default: false
        type: boolean
      target_ubuntu_version:
        description: 'Target Ubuntu version'
        required: false
        default: '24.04'
        type: choice
        options:
          - '24.04'
          - '22.04'

permissions:
  contents: write  # Allow creating releases and uploading assets

jobs:
  build-ubuntu-packages:
    name: Build Ubuntu Packages
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ubuntu_version: ['24.04']
        # Future: Add '22.04' when Go compatibility is resolved
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for reliability
      run: |
        # Configure Docker daemon for better reliability
        sudo mkdir -p /etc/docker
        echo '{
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "10m",
            "max-file": "3"
          },
          "storage-driver": "overlay2"
        }' | sudo tee /etc/docker/daemon.json

        # Restart Docker daemon
        sudo systemctl restart docker

        # Wait for Docker to restart and verify
        sleep 15
        docker info
        docker version
    
    - name: Build Ubuntu Docker image
      run: |
        echo "Building Ubuntu ${{ matrix.ubuntu_version }} package builder..."

        # Build with timeout and retry logic
        timeout 1200 docker build \
          -t onemount-ubuntu-builder \
          -f packaging/docker/Dockerfile.deb-builder \
          --build-arg UBUNTU_VERSION=${{ matrix.ubuntu_version }} \
          --progress=plain \
          --no-cache \
          . || {
            echo "First build attempt failed, retrying..."
            sleep 30
            timeout 1200 docker build \
              -t onemount-ubuntu-builder \
              -f packaging/docker/Dockerfile.deb-builder \
              --build-arg UBUNTU_VERSION=${{ matrix.ubuntu_version }} \
              --progress=plain \
              .
          }
    
    - name: Verify Docker image
      run: |
        docker run --rm onemount-ubuntu-builder go version
        docker run --rm onemount-ubuntu-builder lsb_release -a
    
    - name: Build Ubuntu packages
      run: |
        chmod +x scripts/build-deb-docker.sh

        # Run build with timeout
        timeout 1800 ./scripts/build-deb-docker.sh || {
          echo "Build failed or timed out"
          echo "Docker container logs:"
          docker logs $(docker ps -aq --filter ancestor=onemount-ubuntu-builder) 2>/dev/null || echo "No container logs available"
          exit 1
        }
    
    - name: List built packages
      run: |
        echo "Built packages:"
        ls -la build/packages/deb/ 2>/dev/null || echo "No packages found in build/packages/deb/"

        # Get package info
        if ls build/packages/deb/*.deb 1> /dev/null 2>&1; then
          for deb in build/packages/deb/*.deb; do
            if [ -f "$deb" ]; then
              echo "=== Package: $(basename $deb) ==="
              dpkg-deb --info "$deb"
              echo ""
            fi
          done
        fi

    - name: Test package installation
      run: |
        if ls build/packages/deb/*.deb 1> /dev/null 2>&1; then
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y fuse3 libwebkit2gtk-4.1-0

          # Test package installation
          for deb in build/packages/deb/*.deb; do
            if [ -f "$deb" ]; then
              echo "Testing installation of $(basename $deb)..."
              sudo dpkg -i "$deb" || true
              sudo apt-get install -f -y  # Fix any dependency issues

              # Verify installation
              if dpkg -l | grep -q onemount; then
                echo "✅ Package $(basename $deb) installed successfully"
                dpkg -l | grep onemount
              else
                echo "❌ Package $(basename $deb) installation failed"
                exit 1
              fi

              # Clean up for next package
              sudo dpkg -r onemount || true
            fi
          done
        fi
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ubuntu-packages-${{ matrix.ubuntu_version }}
        path: |
          build/packages/deb/*.deb
          build/packages/deb/*.dsc
          build/packages/deb/*.changes
          build/packages/source/*.tar.gz
        retention-days: 30
    
    - name: Generate package summary
      run: |
        echo "## Ubuntu Package Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Target:** Ubuntu ${{ matrix.ubuntu_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Built packages:**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if ls build/packages/deb/*.deb 1> /dev/null 2>&1; then
          for deb in build/packages/deb/*.deb; do
            if [ -f "$deb" ]; then
              size=$(du -h "$deb" | cut -f1)
              echo "- \`$(basename $deb)\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "- No packages built" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation test:** ✅ Passed" >> $GITHUB_STEP_SUMMARY

  validate-packages:
    name: Validate Package Quality
    runs-on: ubuntu-latest
    needs: build-ubuntu-packages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: ubuntu-packages-24.04
        path: packages/
    
    - name: Install package validation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y lintian devscripts
    
    - name: Validate packages with lintian
      run: |
        cd packages/
        echo "## Package Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for deb in *.deb; do
          echo "Validating $deb with lintian..."
          echo "### $deb" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          if lintian "$deb" >> $GITHUB_STEP_SUMMARY 2>&1; then
            echo "✅ $deb passed lintian validation"
          else
            echo "⚠️ $deb has lintian warnings (see summary)"
          fi
          
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        done
    
    - name: Check package dependencies
      run: |
        cd packages/
        for deb in *.deb; do
          echo "=== Dependencies for $deb ==="
          dpkg-deb --field "$deb" Depends
          echo ""
        done

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-ubuntu-packages, validate-packages]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: ubuntu-packages-24.04
        path: packages/

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        # OneMount ${{ steps.version.outputs.version }}

        ## Ubuntu Packages

        This release includes Ubuntu packages built for Ubuntu 24.04 LTS and compatible distributions (Linux Mint 22, etc.).

        ### Installation

        Download the appropriate \`.deb\` package and install with:

        \`\`\`bash
        sudo dpkg -i onemount_${{ steps.version.outputs.version }}-1_amd64.deb
        sudo apt-get install -f  # Fix any dependency issues
        \`\`\`

        ### Package Contents

        EOF

        cd packages/
        for deb in *.deb; do
          if [ -f "$deb" ]; then
            size=$(du -h "$deb" | cut -f1)
            echo "- **$deb** ($size)" >> ../release_notes.md
          fi
        done

        echo "" >> ../release_notes.md
        echo "### System Requirements" >> ../release_notes.md
        echo "" >> ../release_notes.md
        echo "- Ubuntu 24.04 LTS or compatible distribution" >> ../release_notes.md
        echo "- FUSE3 support" >> ../release_notes.md
        echo "- WebKit2GTK for GUI components" >> ../release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: OneMount ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'rc') || contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') }}
        files: |
          packages/*.deb
          packages/*.dsc
          packages/*.changes
          packages/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
