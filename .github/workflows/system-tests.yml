name: System Tests

on:
  # Run on pull requests
  pull_request:
    branches: [ main ]
    paths:
      - 'internal/**'
      - 'pkg/**'
      - 'tests/system/**'
      - 'go.mod'
      - 'go.sum'

  # Run on pushes to main
  push:
    branches: [ main ]
    paths:
      - 'internal/**'
      - 'pkg/**'
      - 'tests/system/**'
      - 'go.mod'
      - 'go.sum'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - performance
          - reliability
          - integration
          - stress
          - all

permissions:
  contents: read

jobs:
  system-tests:
    runs-on: ubuntu-latest
    
    # Only run if we have the personal OneDrive tokens
    if: ${{ secrets.ONEDRIVE_PERSONAL_TOKENS != '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4


    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          fuse3 \
          libfuse3-dev \
          libwebkit2gtk-4.1-dev \
          libgtk-3-dev \
          pkg-config \
          build-essential \
          jq \
          curl

    - name: Install CLI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements-dev-cli.txt
    
    - name: Set up personal OneDrive credentials
      env:
        ONEDRIVE_PERSONAL_TOKENS: ${{ secrets.ONEDRIVE_PERSONAL_TOKENS }}
      run: |
        # Create test directories
        mkdir -p ~/.onemount-tests/logs
        chmod 700 ~/.onemount-tests

        # Use GitHub secret for auth tokens (secure approach)
        if [ -n "$ONEDRIVE_PERSONAL_TOKENS" ] && [ "$ONEDRIVE_PERSONAL_TOKENS" != "" ]; then
          echo "🔑 Using auth tokens from GitHub secret..."
          echo "$ONEDRIVE_PERSONAL_TOKENS" | base64 -d > ~/.onemount-tests/.auth_tokens.json
        else
          echo "❌ No auth tokens found in GitHub secret ONEDRIVE_PERSONAL_TOKENS"
          echo ""
          echo "To fix this:"
          echo "1. Ensure you have valid auth tokens in your local .env file"
          echo "2. Copy the AUTH_TOKENS_B64 value from .env"
          echo "3. Add it as a GitHub secret named ONEDRIVE_PERSONAL_TOKENS"
          echo "4. Go to: Settings > Secrets and variables > Actions > New repository secret"
          exit 1
        fi

        chmod 600 ~/.onemount-tests/.auth_tokens.json

        # Verify the tokens file is valid JSON
        if ! jq empty ~/.onemount-tests/.auth_tokens.json; then
          echo "❌ Invalid auth tokens format"
          exit 1
        fi

        # Check token expiration
        EXPIRES_AT=$(jq -r '.expires_at // 0' ~/.onemount-tests/.auth_tokens.json)
        CURRENT_TIME=$(date +%s)

        if [ "$EXPIRES_AT" -le "$CURRENT_TIME" ]; then
          echo "⚠️  Auth tokens appear to be expired"
          echo "You may need to refresh your local authentication and update the GitHub secret"
        else
          echo "✅ Auth tokens are valid (expires in $((EXPIRES_AT - CURRENT_TIME)) seconds)"
        fi

        echo "✅ Personal OneDrive credentials configured"
    
    - name: Check and refresh authentication tokens
      run: |
        echo "🔍 Checking authentication token status..."

        # Check if auth file exists and is valid JSON
        if ! jq empty ~/.onemount-tests/.auth_tokens.json 2>/dev/null; then
          echo "❌ Auth tokens file is not valid JSON"
          exit 1
        fi

        # Check token expiration
        EXPIRES_AT=$(jq -r '.expires_at // 0' ~/.onemount-tests/.auth_tokens.json)
        CURRENT_TIME=$(date +%s)
        REFRESH_TOKEN=$(jq -r '.refresh_token // ""' ~/.onemount-tests/.auth_tokens.json)

        echo "Current time: $CURRENT_TIME"
        echo "Token expires at: $EXPIRES_AT"

        if [ "$EXPIRES_AT" -le "$CURRENT_TIME" ]; then
          echo "⚠️  Access token has expired, attempting refresh..."

          if [ -z "$REFRESH_TOKEN" ] || [ "$REFRESH_TOKEN" = "null" ]; then
            echo "❌ No refresh token available - full re-authentication required"
            echo "Please update your GitHub secret ONEDRIVE_PERSONAL_TOKENS with fresh tokens"
            exit 1
          fi

          # Attempt to refresh using OneMount's built-in refresh capability
          echo "🔄 Attempting token refresh using OneMount..."

          # Create a temporary config for refresh
          mkdir -p /tmp/onemount-refresh
          cp ~/.onemount-tests/.auth_tokens.json /tmp/onemount-refresh/auth_tokens.json

          # Try to refresh by doing a simple auth check with OneMount
          # This will automatically refresh if needed
          if timeout 30s ./build/onemount --auth-only --config-file /dev/null --cache-dir /tmp/onemount-refresh 2>/dev/null; then
            echo "✅ Token refresh successful"
            # Copy refreshed tokens back
            if [ -f "/tmp/onemount-refresh/auth_tokens.json" ]; then
              cp /tmp/onemount-refresh/auth_tokens.json ~/.onemount-tests/.auth_tokens.json
              echo "✅ Updated auth tokens file"
            fi
          else
            echo "❌ Token refresh failed - full re-authentication required"
            echo "Please update your GitHub secret ONEDRIVE_PERSONAL_TOKENS with fresh tokens"
            exit 1
          fi

          # Clean up
          rm -rf /tmp/onemount-refresh
        else
          echo "✅ Access token is still valid (expires in $((EXPIRES_AT - CURRENT_TIME)) seconds)"
        fi

    - name: Verify OneDrive access
      run: |
        # Test that we can access your OneDrive
        echo "🌐 Testing OneDrive API access..."

        ACCESS_TOKEN=$(jq -r '.access_token' ~/.onemount-tests/.auth_tokens.json)

        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo "❌ Access token is null or empty"
          exit 1
        fi

        RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "Authorization: Bearer $ACCESS_TOKEN" \
          "https://graph.microsoft.com/v1.0/me/drive/root")

        HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')

        echo "HTTP Status Code: $HTTP_CODE"

        if [ "$HTTP_CODE" = "200" ] && echo "$RESPONSE_BODY" | jq -e '.id' > /dev/null 2>&1; then
          echo "✅ OneDrive access verified"
          DRIVE_NAME=$(echo "$RESPONSE_BODY" | jq -r '.name // "Unknown"')
          echo "Drive Name: $DRIVE_NAME"
        else
          echo "❌ Failed to access OneDrive"
          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          if [ "$HTTP_CODE" = "401" ]; then
            echo "🔑 Authentication failed - tokens may still be expired"
            echo "Please update your GitHub secret ONEDRIVE_PERSONAL_TOKENS with fresh tokens"
          fi
          exit 1
        fi
    
    - name: Build OneMount
      run: make onemount

    - name: Ensure test directories exist
      run: |
        echo "🏗️ Creating test directories..."
        mkdir -p ~/.onemount-tests/logs
        mkdir -p ~/.onemount-tests/tmp/system-test-mount
        mkdir -p ~/.onemount-tests/system-test-data/cache
        chmod 755 ~/.onemount-tests
        chmod 755 ~/.onemount-tests/logs
        chmod 755 ~/.onemount-tests/tmp
        chmod 755 ~/.onemount-tests/system-test-data
        echo "✅ Test directories created"

    - name: Test dev CLI tool
      run: |
        echo "🔧 Testing dev CLI tool..."
        chmod +x scripts/dev

        # Test basic CLI functionality
        echo "Testing CLI help:"
        ./scripts/dev --help || echo "CLI help failed with exit code $?"

        echo ""
        echo "Testing test command help:"
        ./scripts/dev test --help || echo "Test command help failed with exit code $?"

        echo ""
        echo "Testing system test command help:"
        ./scripts/dev test system --help || echo "System test command help failed with exit code $?"

        echo "✅ Dev CLI tool tested"

    - name: Debug environment
      run: |
        echo "🔍 Environment Debug Information"
        echo "================================"
        echo "Working directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Go version: $(go version)"
        echo "Python version: $(python3 --version)"
        echo ""
        echo "📁 Project structure:"
        ls -la
        echo ""
        echo "📁 Scripts directory:"
        ls -la scripts/
        echo ""
        echo "🔧 Dev CLI tool:"
        ls -la scripts/dev*
        echo ""
        echo "📁 Tests directory:"
        ls -la tests/
        echo ""
        echo "📁 System tests:"
        ls -la tests/system/
        echo ""
        echo "🔑 Auth tokens:"
        ls -la ~/.onemount-tests/ || echo "No auth directory found"

    - name: Run system tests
      env:
        TEST_CATEGORY: ${{ github.event.inputs.test_category || 'comprehensive' }}
      run: |
        # Make CLI tool executable
        chmod +x scripts/dev

        # Create test results directory
        mkdir -p system-test-results

        echo "🧪 Running $TEST_CATEGORY system tests..."
        echo "Test category: $TEST_CATEGORY"
        echo "Command: ./scripts/dev test system --category $TEST_CATEGORY --json-output system-test-results/system-tests.json"
        echo ""

        # Run tests with appropriate timeout using the new CLI tool
        case "$TEST_CATEGORY" in
          "comprehensive")
            timeout 15m ./scripts/dev test system --category comprehensive --timeout 15m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"
            ;;
          "performance")
            timeout 20m ./scripts/dev test system --category performance --timeout 20m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"
            ;;
          "reliability")
            timeout 10m ./scripts/dev test system --category reliability --timeout 10m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"
            ;;
          "integration")
            timeout 10m ./scripts/dev test system --category integration --timeout 10m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"
            ;;
          "stress")
            timeout 25m ./scripts/dev test system --category stress --timeout 25m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"
            ;;
          "all")
            timeout 45m ./scripts/dev test system --category all --timeout 45m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"
            ;;
          *)
            echo "❌ Unknown test category: $TEST_CATEGORY"
            exit 1
            ;;
        esac

        echo ""
        echo "📊 Test execution completed"
        echo "Results directory contents:"
        ls -la system-test-results/ || echo "No results directory found"

        if [ -f system-test-results/system-tests.json ]; then
          echo "JSON output file size: $(wc -c < system-test-results/system-tests.json) bytes"
          echo "First 500 characters of JSON output:"
          head -c 500 system-test-results/system-tests.json || echo "Could not read JSON file"
        else
          echo "❌ No JSON output file generated"
        fi

    - name: Generate JUnit XML from system test results
      if: always()
      run: |
        # Install go-junit-report if not available
        go install github.com/jstemmer/go-junit-report/v2@latest

        # Ensure results directory exists
        mkdir -p system-test-results

        # Convert JSON to JUnit XML if JSON file exists and is not empty
        if [ -f system-test-results/system-tests.json ] && [ -s system-test-results/system-tests.json ]; then
          echo "Converting JSON test results to JUnit XML..."
          cat system-test-results/system-tests.json | go-junit-report -set-exit-code > system-test-results/junit.xml
          echo "JUnit XML generated successfully"
        else
          echo "No JSON test results found or file is empty, creating minimal JUnit report"
          cat > system-test-results/junit.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="system-tests" tests="1" failures="1" time="0">
    <testcase name="SystemTestExecution" classname="OneMount">
      <failure message="System tests did not produce valid JSON output">
        System tests failed to execute properly or did not generate JSON output.
        Check the test execution logs for more details.
      </failure>
    </testcase>
  </testsuite>
</testsuites>
EOF
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-results
        path: system-test-results/
        retention-days: 30

    - name: Publish system test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: System Tests
        path: system-test-results/junit.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-logs
        path: |
          ~/.onemount-tests/logs/
        retention-days: 7
    
    - name: Cleanup test data
      if: always()
      run: |
        # Clean up test files from your OneDrive
        ACCESS_TOKEN=$(jq -r '.access_token' ~/.onemount-tests/.auth_tokens.json 2>/dev/null || echo "")
        
        if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "null" ]; then
          echo "🧹 Cleaning up test data from OneDrive..."
          
          # Delete the test directory
          curl -s -X DELETE \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://graph.microsoft.com/v1.0/me/drive/root:/onemount_system_tests" || true
          
          echo "✅ Test data cleanup completed"
        fi
        
        # Clean up local test files
        rm -rf ~/.onemount-tests/ || true
        
        # Unmount any remaining FUSE mounts
        fusermount3 -uz ~/.onemount-tests/tmp/system-test-mount 2>/dev/null || true

  # Job to provide helpful information if secrets are missing
  check-setup:
    runs-on: ubuntu-latest
    if: ${{ secrets.ONEDRIVE_PERSONAL_TOKENS == '' }}
    steps:
    - name: Setup instructions
      run: |
        echo "🔧 Personal OneDrive system tests are not configured"
        echo ""
        echo "To enable system tests with your personal OneDrive:"
        echo "1. Run locally: base64 -w 0 ~/.cache/onemount/auth_tokens.json"
        echo "2. Go to Settings → Secrets and variables → Actions"
        echo "3. Add secret: ONEDRIVE_PERSONAL_TOKENS with the base64 output"
        echo ""
        echo "See docs/testing/personal-onedrive-ci-setup.md for detailed instructions"
