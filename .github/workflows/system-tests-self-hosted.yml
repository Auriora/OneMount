name: System Tests (Self-Hosted)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  system-tests:
    # Use self-hosted runner with pre-configured credentials
    runs-on: [self-hosted, Linux, onemount-testing, optimized]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Load environment variables from .env (self-hosted only)
      run: |
        if [ -f ".env" ]; then
          echo "üìÑ Loading environment variables from .env file (self-hosted runner)..."
          # Export variables from .env file (excluding comments and empty lines)
          set -a
          source .env
          set +a
          echo "‚úÖ Environment variables loaded"

          # Show which auth method will be used (without exposing tokens)
          if [ -n "$AUTH_TOKENS_B64" ]; then
            echo "üîë AUTH_TOKENS_B64 found in .env file"
          else
            echo "‚ö†Ô∏è  No AUTH_TOKENS_B64 in .env file"
          fi
        else
          echo "‚ö†Ô∏è  No .env file found"
        fi
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install CLI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements-dev-cli.txt
    
    - name: Verify test credentials
      run: |
        # Create test directories
        mkdir -p ~/.onemount-tests/logs
        chmod 700 ~/.onemount-tests

        # Try multiple sources for auth tokens
        AUTH_TOKENS_FOUND=false

        # 1. Try .env file AUTH_TOKENS_B64 first (since we're on self-hosted)
        if [ -f ".env" ] && grep -q "AUTH_TOKENS_B64=" .env; then
          echo "üîë Using auth tokens from .env file..."
          AUTH_TOKENS_B64=$(grep "AUTH_TOKENS_B64=" .env | cut -d'=' -f2)
          if [ -n "$AUTH_TOKENS_B64" ]; then
            echo "$AUTH_TOKENS_B64" | base64 -d > ~/.onemount-tests/.auth_tokens.json
            AUTH_TOKENS_FOUND=true
          fi
        fi

        # 2. Try environment variable AUTH_TOKENS_B64
        if [ "$AUTH_TOKENS_FOUND" = false ] && [ -n "$AUTH_TOKENS_B64" ]; then
          echo "üîë Using auth tokens from AUTH_TOKENS_B64 environment variable..."
          echo "$AUTH_TOKENS_B64" | base64 -d > ~/.onemount-tests/.auth_tokens.json
          AUTH_TOKENS_FOUND=true
        fi

        # 3. Try existing credential file locations
        if [ "$AUTH_TOKENS_FOUND" = false ]; then
          CREDENTIAL_PATHS=(
            "/opt/onemount-ci/.auth_tokens.json"
            "/home/runner/.onemount-tests/.auth_tokens.json"
            "/home/actions/.onemount-tests/.auth_tokens.json"
            "$HOME/.onemount-tests/.auth_tokens.json"
          )

          FOUND_CREDENTIALS=""
          for path in "${CREDENTIAL_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "‚úÖ Found credentials at: $path"
              FOUND_CREDENTIALS="$path"
              break
            else
              echo "‚ùå No credentials at: $path"
            fi
          done

          if [ -n "$FOUND_CREDENTIALS" ]; then
            # Copy to expected location if not already there
            if [ "$FOUND_CREDENTIALS" != "$HOME/.onemount-tests/.auth_tokens.json" ]; then
              cp "$FOUND_CREDENTIALS" ~/.onemount-tests/.auth_tokens.json
            fi
            AUTH_TOKENS_FOUND=true
          fi
        fi

        if [ "$AUTH_TOKENS_FOUND" = false ]; then
          echo "‚ùå Test credentials not found on self-hosted runner"
          echo "Checked sources:"
          echo "  - .env file AUTH_TOKENS_B64"
          echo "  - Environment variable AUTH_TOKENS_B64"
          echo "  - Credential file locations:"
          for path in "${CREDENTIAL_PATHS[@]}"; do
            echo "    - $path"
          done
          echo ""
          echo "Please ensure authentication tokens are available from one of these sources."
          echo "See docs/testing/self-hosted-runner-setup.md for setup instructions."
          exit 1
        fi

        chmod 600 ~/.onemount-tests/.auth_tokens.json

        # Verify the file is valid JSON
        if ! jq empty ~/.onemount-tests/.auth_tokens.json 2>/dev/null; then
          echo "‚ùå Credentials file is not valid JSON"
          exit 1
        fi

        # Check token expiration
        EXPIRES_AT=$(jq -r '.expires_at // 0' ~/.onemount-tests/.auth_tokens.json)
        CURRENT_TIME=$(date +%s)

        if [ "$EXPIRES_AT" -le "$CURRENT_TIME" ]; then
          echo "‚ö†Ô∏è  Auth tokens appear to be expired"
          echo "You may need to refresh your local authentication and update the tokens"
        else
          echo "‚úÖ Auth tokens are valid (expires in $((EXPIRES_AT - CURRENT_TIME)) seconds)"
        fi

        echo "‚úÖ Test credentials loaded and validated"

    - name: Check and refresh authentication tokens
      run: |
        echo "üîç Checking authentication token status..."

        # Check token expiration
        EXPIRES_AT=$(jq -r '.expires_at // 0' ~/.onemount-tests/.auth_tokens.json)
        CURRENT_TIME=$(date +%s)
        REFRESH_TOKEN=$(jq -r '.refresh_token // ""' ~/.onemount-tests/.auth_tokens.json)

        echo "Current time: $CURRENT_TIME"
        echo "Token expires at: $EXPIRES_AT"

        if [ "$EXPIRES_AT" -le "$CURRENT_TIME" ]; then
          echo "‚ö†Ô∏è  Access token has expired, attempting refresh..."

          if [ -z "$REFRESH_TOKEN" ] || [ "$REFRESH_TOKEN" = "null" ]; then
            echo "‚ùå No refresh token available - full re-authentication required"
            echo "Please update your .env file AUTH_TOKENS_B64 with fresh tokens"
            exit 1
          fi

          # Attempt to refresh using OneMount's built-in refresh capability
          echo "üîÑ Attempting token refresh using OneMount..."

          # Create a temporary config for refresh
          mkdir -p /tmp/onemount-refresh
          cp ~/.onemount-tests/.auth_tokens.json /tmp/onemount-refresh/auth_tokens.json

          # Try to refresh by doing a simple auth check with OneMount
          # This will automatically refresh if needed
          if timeout 30s ./build/onemount --auth-only --config-file /dev/null --cache-dir /tmp/onemount-refresh 2>/dev/null; then
            echo "‚úÖ Token refresh successful"
            # Copy refreshed tokens back
            if [ -f "/tmp/onemount-refresh/auth_tokens.json" ]; then
              cp /tmp/onemount-refresh/auth_tokens.json ~/.onemount-tests/.auth_tokens.json
              echo "‚úÖ Updated auth tokens file"

              # Also update the .env file if we can
              if [ -f ".env" ] && [ -w ".env" ]; then
                echo "üîÑ Updating .env file with refreshed tokens..."
                NEW_AUTH_TOKENS_B64=$(base64 -w 0 ~/.onemount-tests/.auth_tokens.json)
                sed -i "s/^AUTH_TOKENS_B64=.*/AUTH_TOKENS_B64=$NEW_AUTH_TOKENS_B64/" .env
                echo "‚úÖ Updated .env file with refreshed tokens"
              fi
            fi
          else
            echo "‚ùå Token refresh failed - full re-authentication required"
            echo "Please update your .env file AUTH_TOKENS_B64 with fresh tokens"
            exit 1
          fi

          # Clean up
          rm -rf /tmp/onemount-refresh
        else
          echo "‚úÖ Access token is still valid (expires in $((EXPIRES_AT - CURRENT_TIME)) seconds)"
        fi
    
    - name: Build OneMount
      run: make onemount

    - name: Ensure test directories exist
      run: |
        echo "üèóÔ∏è Creating test directories..."
        mkdir -p ~/.onemount-tests/logs
        mkdir -p ~/.onemount-tests/tmp/system-test-mount
        mkdir -p ~/.onemount-tests/system-test-data/cache
        chmod 755 ~/.onemount-tests
        chmod 755 ~/.onemount-tests/logs
        chmod 755 ~/.onemount-tests/tmp
        chmod 755 ~/.onemount-tests/system-test-data
        echo "‚úÖ Test directories created"

    - name: Test dev CLI tool
      run: |
        echo "üîß Testing dev CLI tool..."
        chmod +x scripts/dev

        # Test basic CLI functionality
        echo "Testing CLI help:"
        ./scripts/dev --help || echo "CLI help failed with exit code $?"

        echo ""
        echo "Testing test command help:"
        ./scripts/dev test --help || echo "Test command help failed with exit code $?"

        echo ""
        echo "Testing system test command help:"
        ./scripts/dev test system --help || echo "System test command help failed with exit code $?"

        echo "‚úÖ Dev CLI tool tested"

    - name: Debug environment
      run: |
        echo "üîç Self-hosted Runner Environment Debug"
        echo "======================================"
        echo "Working directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Go version: $(go version)"
        echo "Python version: $(python3 --version)"
        echo ""
        echo "üîë Auth tokens:"
        ls -la ~/.onemount-tests/ || echo "No auth directory found"
        echo ""
        echo "üîß Dev CLI tool:"
        ls -la scripts/dev*

    - name: Run all system tests
      run: |
        chmod +x scripts/dev
        # Create test results directory
        mkdir -p system-test-results

        echo "üß™ Running all system tests on self-hosted runner..."
        echo "Command: ./scripts/dev test system --category all --timeout 45m --json-output system-test-results/system-tests.json"
        echo ""

        # Run system tests with JSON output for reporting
        ./scripts/dev test system --category all --timeout 45m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"

        echo ""
        echo "üìä Test execution completed"
        echo "Results directory contents:"
        ls -la system-test-results/ || echo "No results directory found"

        if [ -f system-test-results/system-tests.json ]; then
          echo "JSON output file size: $(wc -c < system-test-results/system-tests.json) bytes"
          echo "First 500 characters of JSON output:"
          head -c 500 system-test-results/system-tests.json || echo "Could not read JSON file"
        else
          echo "‚ùå No JSON output file generated"
        fi

    - name: Generate JUnit XML from system test results
      if: always()
      run: |
        # Install go-junit-report if not available
        go install github.com/jstemmer/go-junit-report/v2@latest

        # Ensure results directory exists
        mkdir -p system-test-results

        # Convert JSON to JUnit XML if JSON file exists and is not empty
        if [ -f system-test-results/system-tests.json ] && [ -s system-test-results/system-tests.json ]; then
          echo "Converting JSON test results to JUnit XML..."
          cat system-test-results/system-tests.json | go-junit-report -set-exit-code > system-test-results/junit.xml
          echo "JUnit XML generated successfully"
        else
          echo "No JSON test results found or file is empty, creating minimal JUnit report"
          echo '<?xml version="1.0" encoding="UTF-8"?>' > system-test-results/junit.xml
          echo '<testsuites>' >> system-test-results/junit.xml
          echo '  <testsuite name="system-tests" tests="1" failures="1" time="0">' >> system-test-results/junit.xml
          echo '    <testcase name="SystemTestExecution" classname="OneMount">' >> system-test-results/junit.xml
          echo '      <failure message="System tests did not produce valid JSON output">' >> system-test-results/junit.xml
          echo '        System tests failed to execute properly or did not generate JSON output.' >> system-test-results/junit.xml
          echo '        Check the test execution logs for more details.' >> system-test-results/junit.xml
          echo '      </failure>' >> system-test-results/junit.xml
          echo '    </testcase>' >> system-test-results/junit.xml
          echo '  </testsuite>' >> system-test-results/junit.xml
          echo '</testsuites>' >> system-test-results/junit.xml
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-results-self-hosted
        path: system-test-results/
        retention-days: 30

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-logs-self-hosted
        path: ~/.onemount-tests/logs/
        retention-days: 30

    - name: Publish system test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: System Tests (Self-Hosted)
        path: system-test-results/junit.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.onemount-tests/ || true
        # Unmount any remaining FUSE mounts
        for mount in $(mount | grep onemount | awk '{print $3}'); do
          fusermount3 -uz "$mount" 2>/dev/null || true
        done
