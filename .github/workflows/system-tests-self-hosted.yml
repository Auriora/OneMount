name: System Tests (Self-Hosted)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  system-tests:
    # Use self-hosted runner with pre-configured credentials
    runs-on: [self-hosted, Linux, onemount-testing, optimized]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install CLI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r scripts/requirements-dev-cli.txt
    
    - name: Verify test credentials
      run: |
        # Check multiple possible credential locations
        CREDENTIAL_PATHS=(
          "/opt/onemount-ci/.auth_tokens.json"
          "/home/runner/.onemount-tests/.auth_tokens.json"
          "/home/actions/.onemount-tests/.auth_tokens.json"
          "$HOME/.onemount-tests/.auth_tokens.json"
        )

        FOUND_CREDENTIALS=""
        for path in "${CREDENTIAL_PATHS[@]}"; do
          if [ -f "$path" ]; then
            echo "✅ Found credentials at: $path"
            FOUND_CREDENTIALS="$path"
            break
          else
            echo "❌ No credentials at: $path"
          fi
        done

        if [ -z "$FOUND_CREDENTIALS" ]; then
          echo "❌ Test credentials not found on self-hosted runner"
          echo "Checked locations:"
          for path in "${CREDENTIAL_PATHS[@]}"; do
            echo "  - $path"
          done
          echo ""
          echo "Please ensure authentication tokens are available at one of these locations."
          echo "See docs/testing/self-hosted-runner-setup.md for setup instructions."
          exit 1
        fi

        # Copy to expected location if not already there
        mkdir -p ~/.onemount-tests
        if [ "$FOUND_CREDENTIALS" != "$HOME/.onemount-tests/.auth_tokens.json" ]; then
          cp "$FOUND_CREDENTIALS" ~/.onemount-tests/.auth_tokens.json
        fi
        chmod 600 ~/.onemount-tests/.auth_tokens.json

        # Verify the file is valid JSON
        if ! jq empty ~/.onemount-tests/.auth_tokens.json 2>/dev/null; then
          echo "❌ Credentials file is not valid JSON"
          exit 1
        fi

        echo "✅ Test credentials loaded and validated"
    
    - name: Build OneMount
      run: make onemount

    - name: Ensure test directories exist
      run: |
        echo "🏗️ Creating test directories..."
        mkdir -p ~/.onemount-tests/logs
        mkdir -p ~/.onemount-tests/tmp/system-test-mount
        mkdir -p ~/.onemount-tests/system-test-data/cache
        chmod 755 ~/.onemount-tests
        chmod 755 ~/.onemount-tests/logs
        chmod 755 ~/.onemount-tests/tmp
        chmod 755 ~/.onemount-tests/system-test-data
        echo "✅ Test directories created"

    - name: Test dev CLI tool
      run: |
        echo "🔧 Testing dev CLI tool..."
        chmod +x scripts/dev

        # Test basic CLI functionality
        echo "Testing CLI help:"
        ./scripts/dev --help || echo "CLI help failed with exit code $?"

        echo ""
        echo "Testing test command help:"
        ./scripts/dev test --help || echo "Test command help failed with exit code $?"

        echo ""
        echo "Testing system test command help:"
        ./scripts/dev test system --help || echo "System test command help failed with exit code $?"

        echo "✅ Dev CLI tool tested"

    - name: Debug environment
      run: |
        echo "🔍 Self-hosted Runner Environment Debug"
        echo "======================================"
        echo "Working directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Go version: $(go version)"
        echo "Python version: $(python3 --version)"
        echo ""
        echo "🔑 Auth tokens:"
        ls -la ~/.onemount-tests/ || echo "No auth directory found"
        echo ""
        echo "🔧 Dev CLI tool:"
        ls -la scripts/dev*

    - name: Run all system tests
      run: |
        chmod +x scripts/dev
        # Create test results directory
        mkdir -p system-test-results

        echo "🧪 Running all system tests on self-hosted runner..."
        echo "Command: ./scripts/dev test system --category all --timeout 45m --json-output system-test-results/system-tests.json"
        echo ""

        # Run system tests with JSON output for reporting
        ./scripts/dev test system --category all --timeout 45m --json-output system-test-results/system-tests.json || echo "Tests completed with exit code $?"

        echo ""
        echo "📊 Test execution completed"
        echo "Results directory contents:"
        ls -la system-test-results/ || echo "No results directory found"

        if [ -f system-test-results/system-tests.json ]; then
          echo "JSON output file size: $(wc -c < system-test-results/system-tests.json) bytes"
          echo "First 500 characters of JSON output:"
          head -c 500 system-test-results/system-tests.json || echo "Could not read JSON file"
        else
          echo "❌ No JSON output file generated"
        fi

    - name: Generate JUnit XML from system test results
      if: always()
      run: |
        # Install go-junit-report if not available
        go install github.com/jstemmer/go-junit-report/v2@latest

        # Ensure results directory exists
        mkdir -p system-test-results

        # Convert JSON to JUnit XML if JSON file exists and is not empty
        if [ -f system-test-results/system-tests.json ] && [ -s system-test-results/system-tests.json ]; then
          echo "Converting JSON test results to JUnit XML..."
          cat system-test-results/system-tests.json | go-junit-report -set-exit-code > system-test-results/junit.xml
          echo "JUnit XML generated successfully"
        else
          echo "No JSON test results found or file is empty, creating minimal JUnit report"
          cat > system-test-results/junit.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="system-tests" tests="1" failures="1" time="0">
    <testcase name="SystemTestExecution" classname="OneMount">
      <failure message="System tests did not produce valid JSON output">
        System tests failed to execute properly or did not generate JSON output.
        Check the test execution logs for more details.
      </failure>
    </testcase>
  </testsuite>
</testsuites>
EOF
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-results-self-hosted
        path: system-test-results/
        retention-days: 30

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: system-test-logs-self-hosted
        path: ~/.onemount-tests/logs/
        retention-days: 30

    - name: Publish system test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: System Tests (Self-Hosted)
        path: system-test-results/junit.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.onemount-tests/ || true
        # Unmount any remaining FUSE mounts
        for mount in $(mount | grep onemount | awk '{print $3}'); do
          fusermount3 -uz "$mount" 2>/dev/null || true
        done
