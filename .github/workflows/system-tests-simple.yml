name: System Tests (Simple)

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  system-tests:
    runs-on: ubuntu-latest
    
    # Only run if we have the personal OneDrive tokens
    if: ${{ secrets.ONEDRIVE_PERSONAL_TOKENS != '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
    
    - name: Install FUSE
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse3 libfuse3-dev
    
    - name: Set up personal OneDrive credentials
      env:
        ONEDRIVE_PERSONAL_TOKENS: ${{ secrets.ONEDRIVE_PERSONAL_TOKENS }}
      run: |
        # Create test directories
        mkdir -p ~/.onemount-tests/logs
        chmod 700 ~/.onemount-tests

        # Decode and save the auth tokens
        echo "$ONEDRIVE_PERSONAL_TOKENS" | base64 -d > ~/.onemount-tests/.auth_tokens.json
        chmod 600 ~/.onemount-tests/.auth_tokens.json

        # Verify the tokens file is valid JSON
        if ! jq empty ~/.onemount-tests/.auth_tokens.json; then
          echo "❌ Invalid auth tokens format"
          exit 1
        fi

        # Check token expiration
        EXPIRES_AT=$(jq -r '.expires_at // 0' ~/.onemount-tests/.auth_tokens.json)
        CURRENT_TIME=$(date +%s)

        if [ "$EXPIRES_AT" -le "$CURRENT_TIME" ]; then
          echo "⚠️  Auth tokens appear to be expired"
          echo "You may need to refresh your local authentication and update the GitHub secret"
        else
          echo "✅ Auth tokens are valid (expires in $((EXPIRES_AT - CURRENT_TIME)) seconds)"
        fi

        echo "✅ Personal OneDrive credentials configured"
    
    - name: Verify OneDrive access
      run: |
        # Test that we can access your OneDrive
        ACCESS_TOKEN=$(jq -r '.access_token' ~/.onemount-tests/.auth_tokens.json)

        RESPONSE=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
          "https://graph.microsoft.com/v1.0/me/drive/root")

        if echo "$RESPONSE" | jq -e '.id' > /dev/null; then
          echo "✅ OneDrive access verified"
          DRIVE_NAME=$(echo "$RESPONSE" | jq -r '.name // "Unknown"')
          echo "Drive Name: $DRIVE_NAME"
        else
          echo "❌ Failed to access OneDrive"
          echo "Response: $RESPONSE"
          echo "You may need to refresh your authentication tokens"
          exit 1
        fi

    - name: Build OneMount
      run: make build

    - name: Run comprehensive system tests
      run: |
        chmod +x scripts/run-system-tests.sh
        timeout 15m ./scripts/run-system-tests.sh --comprehensive --verbose

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: system-test-logs-simple
        path: ~/.onemount-tests/logs/
        retention-days: 7

    - name: Cleanup test data
      if: always()
      run: |
        # Clean up test files from your OneDrive
        ACCESS_TOKEN=$(jq -r '.access_token' ~/.onemount-tests/.auth_tokens.json 2>/dev/null || echo "")

        if [ -n "$ACCESS_TOKEN" ] && [ "$ACCESS_TOKEN" != "null" ]; then
          echo "🧹 Cleaning up test data from OneDrive..."

          # Delete the test directory
          curl -s -X DELETE \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://graph.microsoft.com/v1.0/me/drive/root:/onemount_system_tests" || true

          echo "✅ Test data cleanup completed"
        fi

        # Clean up local test files
        rm -rf ~/.onemount-tests/ || true

        # Unmount any remaining FUSE mounts
        fusermount3 -uz ~/.onemount-tests/tmp/system-test-mount 2>/dev/null || true
