# OneMount Workflow Optimization Configuration
# This file defines optimization settings for GitHub Actions workflows

# Performance targets (in minutes)
performance_targets:
  ci_workflow: 5-8
  coverage_workflow: 8-12
  build_packages: 10-15
  system_tests_self_hosted: 3-5

# Caching strategies
caching:
  go_modules:
    paths:
      - "~/go/pkg/mod"
      - "~/.cache/go-build"
    key_pattern: "${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ hashFiles('**/*.go') }}"
    restore_keys:
      - "${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-"
      - "${{ runner.os }}-go-"
  
  docker_buildx:
    enabled: true
    cache_from: "type=gha"
    cache_to: "type=gha,mode=max"
  
  python_deps:
    paths:
      - "~/.cache/pip"
    key_pattern: "${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}"

# Runner configurations
runners:
  self_hosted:
    labels: ["self-hosted", "linux", "onemount-testing"]
    fallback: "ubuntu-latest"
    use_for:
      - ci
      - coverage
      - system_tests
    
  github_hosted:
    use_for:
      - build_packages  # Only for releases
      - manual_dispatch  # When explicitly requested

# Workflow triggers optimization
triggers:
  path_filters:
    code_changes:
      - "internal/**"

      - "cmd/**"
      - "go.mod"
      - "go.sum"
    
    workflow_changes:
      - ".github/workflows/**"
    
    docs_only:
      - "docs/**"
      - "README.md"
      - "*.md"
    
    packaging_changes:
      - "packaging/**"
      - "Makefile"

# Parallel execution strategy
parallelization:
  ci_workflow:
    jobs:
      - test_and_build
      - lint
    can_run_parallel: true
  
  coverage_workflow:
    depends_on: []  # Can run independently
    
  system_tests:
    depends_on: ["ci_workflow"]  # Only after CI passes

# Resource limits
resources:
  docker_builds:
    timeout: "20m"
    memory_limit: "4G"
    
  go_tests:
    timeout: "10m"
    parallel_jobs: 4
    
  coverage_analysis:
    timeout: "15m"

# Optimization features
features:
  skip_duplicate_runs: true
  cancel_in_progress: true
  fail_fast: false
  
  docker_optimizations:
    buildkit: true
    inline_cache: true
    multi_stage: true
    
  go_optimizations:
    module_proxy: "https://proxy.golang.org"
    build_cache: true
    test_cache: true

# Monitoring and alerts
monitoring:
  performance_thresholds:
    ci_workflow_max: "10m"
    coverage_workflow_max: "15m"
    build_packages_max: "25m"
  
  failure_notifications:
    enabled: true
    channels: ["github_issues"]

# Environment-specific settings
environments:
  development:
    use_self_hosted: true
    enable_debug: true
    
  production:
    use_self_hosted: false  # Use GitHub runners for releases
    enable_debug: false
    
  testing:
    use_self_hosted: true
    enable_verbose_logging: true
