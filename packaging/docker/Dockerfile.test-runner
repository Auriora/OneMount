# Dockerfile for running OneMount tests in isolation
# Provides a clean, reproducible environment for all test types
ARG BASE_IMAGE=onemount-base:0.1.0rc1
FROM ${BASE_IMAGE}
# Define version arg for labels (avoid UndefinedVar warnings)
ARG ONEMOUNT_VERSION=0.1.0rc1

# Install additional dependencies for testing
RUN apt-get update && apt-get install -y \
    # Python for test scripts
    python3 \
    python3-pip \
    python3-venv \
    python3.12-venv \
    # Network tools for testing
    iputils-ping \
    netcat-openbsd \
    # Process management
    psmisc \
    # Cleanup
    && rm -rf /var/lib/apt/lists/*

# Set Go environment for test user
ENV GOPATH="/home/tester/go"
ENV GOCACHE="/tmp/go-cache"
ENV GOMODCACHE="/tmp/go-mod-cache"

# Install Python dependencies for OneMount development CLI
# Copy requirements file first for better Docker layer caching
COPY scripts/requirements-dev-cli.txt /tmp/requirements-dev-cli.txt
RUN pip3 install --no-cache-dir --break-system-packages -r /tmp/requirements-dev-cli.txt && \
    rm /tmp/requirements-dev-cli.txt

# Create test user and add to existing FUSE group
RUN useradd -m -s /bin/bash -G fuse tester && \
    mkdir -p /workspace && \
    chown tester:tester /workspace

# Set up Go environment for test user
USER tester
RUN mkdir -p /home/tester/go && \
    echo 'export GOPATH=/home/tester/go' >> /home/tester/.bashrc && \
    echo 'export PATH=/usr/local/go/bin:$GOPATH/bin:$PATH' >> /home/tester/.bashrc

# Set working directory
WORKDIR /workspace

# Copy go.mod and go.sum first for better caching
COPY --chown=tester:tester go.mod go.sum ./

# Download dependencies (this layer will be cached unless go.mod/go.sum changes)
RUN go mod download

# Copy only required source to maximize cache hits (avoid copying entire repo)
COPY --chown=tester:tester cmd/ ./cmd
COPY --chown=tester:tester internal/ ./internal
# Only the helper needed by build; avoid copying whole scripts dir
COPY --chown=tester:tester scripts/cgo-helper.sh ./scripts/cgo-helper.sh

# Create test directories
RUN mkdir -p /home/tester/.onemount-tests/tmp && \
    mkdir -p /home/tester/.onemount-tests/logs && \
    mkdir -p /home/tester/.cache/onemount

# Copy test entrypoint script and Python helper script and make them executable
COPY packaging/docker/test-entrypoint.sh /usr/local/bin/test-entrypoint.sh
COPY packaging/docker/python-helper.sh /usr/local/bin/python-helper.sh
USER root
RUN chmod +x /usr/local/bin/test-entrypoint.sh && \
    chmod +x /usr/local/bin/python-helper.sh
USER tester

# Pre-build OneMount binaries for faster test execution
RUN bash scripts/cgo-helper.sh && \
    mkdir -p build/binaries && \
    CGO_CFLAGS=-Wno-deprecated-declarations go build -v \
        -o build/binaries/onemount \
        -ldflags="-X github.com/auriora/onemount/cmd/common.commit=$(git rev-parse HEAD 2>/dev/null || echo 'unknown')" \
        ./cmd/onemount && \
    CGO_CFLAGS=-Wno-deprecated-declarations go build -v \
        -o build/binaries/onemount-launcher \
        -ldflags="-X github.com/auriora/onemount/cmd/common.commit=$(git rev-parse HEAD 2>/dev/null || echo 'unknown')" \
        ./cmd/onemount-launcher

# Default command
ENTRYPOINT ["/usr/local/bin/test-entrypoint.sh"]
CMD ["help"]

# Add labels for better image management
LABEL org.opencontainers.image.title="OneMount Test Runner"
LABEL org.opencontainers.image.description="Docker image for running OneMount tests in isolation (extends onemount-base)"
LABEL org.opencontainers.image.vendor="Auriora"
LABEL org.opencontainers.image.source="https://github.com/Auriora/OneMount"
LABEL org.opencontainers.image.version="${ONEMOUNT_VERSION:-0.1.0rc1}"
