# Docker Compose configuration for OneMount testing
# References pre-built images by tag, builds only when explicitly requested

services:
  # Main test runner service - uses pre-built image by default
  test-runner:
    image: ${ONEMOUNT_TEST_IMAGE:-onemount-test-runner:${ONEMOUNT_VERSION:-0.1.0rc1}}
    container_name: ${ONEMOUNT_CONTAINER_NAME:-onemount-test-runner}
    # Ensure base image is available
    depends_on:
      - base-image

    # Run as current user to avoid permission issues
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"

    # Mount project source code
    volumes:
      - ../..:/workspace:rw
      # Mount test artifacts directory for output (consistent path)
      - ../../test-artifacts:/tmp/home-tester/.onemount-tests:rw

    # Enable FUSE support for filesystem testing
    devices:
      - /dev/fuse:/dev/fuse
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined

    # Configure IPv4-only networking
    network_mode: bridge
    dns:
      - 8.8.8.8
      - 8.8.4.4

    # Resource limits for base test runner
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '0.5'

    # Environment variables
    environment:
      - ONEMOUNT_TEST_TIMEOUT=5m
      - ONEMOUNT_TEST_VERBOSE=false
      - GORACE=log_path=fusefs_tests.race strip_path_prefix=1
      - GOGC=50
      - GOMEMLIMIT=2GiB

    # Default command
    command: ["help"]

    # Interactive mode for shell access
    stdin_open: true
    tty: true

  # Base image reference (not a running container)
  base-image:
    image: onemount-base:${ONEMOUNT_VERSION:-0.1.0rc1}
    # This is a reference only, not a running container
    entrypoint: ["echo", "Base image reference only - not a running container"]
    profiles:
      - never-run

  # Unit tests only (lightweight, no FUSE required)
  unit-tests:
    extends:
      service: test-runner
    container_name: onemount-unit-tests

    # Remove FUSE requirements for unit tests
    devices: []
    cap_add: []
    security_opt: []

    # Set verbose mode via environment variable
    environment:
      - ONEMOUNT_TEST_TIMEOUT=5m
      - ONEMOUNT_TEST_VERBOSE=true
      - GORACE=log_path=fusefs_tests.race strip_path_prefix=1

    command: ["unit"]

  # Integration tests
  integration-tests:
    extends:
      service: test-runner
    container_name: onemount-integration-tests

    environment:
      - ONEMOUNT_TEST_TIMEOUT=5m
      - ONEMOUNT_TEST_VERBOSE=true
      - GORACE=log_path=fusefs_tests.race strip_path_prefix=1

    command: ["integration"]

  # System tests (requires auth tokens)
  system-tests:
    extends:
      service: test-runner
    container_name: onemount-system-tests

    # Mount auth tokens for system tests
    volumes:
      - ../..:/workspace:rw
      - ../../test-artifacts:/tmp/home-tester/.onemount-tests:rw

    # Resource limits for system tests
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4'
        reservations:
          memory: 2G
          cpus: '1'

    # Longer timeout for system tests
    environment:
      - ONEMOUNT_TEST_TIMEOUT=30m
      - ONEMOUNT_TEST_VERBOSE=true
      - GORACE=log_path=fusefs_tests.race strip_path_prefix=1
      - GOGC=50
      - GOMEMLIMIT=4GiB
      - ONEMOUNT_SKIP_LARGE_FILES=true
      - DOCKER_CONTAINER=true

    command: ["system"]

  # Coverage analysis
  coverage:
    extends:
      service: test-runner
    container_name: onemount-coverage

    # Mount coverage output directory and test artifacts
    volumes:
      - ../..:/workspace:rw
      - ../../coverage:/workspace/coverage:rw
      - ../../test-artifacts:/tmp/home-tester/.onemount-tests:rw

    environment:
      - ONEMOUNT_TEST_TIMEOUT=5m
      - ONEMOUNT_TEST_VERBOSE=true
      - GORACE=log_path=fusefs_tests.race strip_path_prefix=1

    command: ["coverage"]

  # Interactive shell for debugging
  shell:
    extends:
      service: test-runner
    container_name: onemount-shell
    command: ["shell"]
